// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/server_tunnel.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServerTunnel struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	MetadataClient      *MetadataClient        `protobuf:"bytes,1,opt,name=metadata_client,json=metadataClient,proto3,oneof" json:"metadata_client,omitempty"`
	MetadataDevice      *MetadataDevice        `protobuf:"bytes,2,opt,name=metadata_device,json=metadataDevice,proto3,oneof" json:"metadata_device,omitempty"`
	MetadataSession     *MetadataSession       `protobuf:"bytes,3,opt,name=metadata_session,json=metadataSession,proto3,oneof" json:"metadata_session,omitempty"`
	MetadataServerEntry *MetadataServerEntry   `protobuf:"bytes,4,opt,name=metadata_server_entry,json=metadataServerEntry,proto3,oneof" json:"metadata_server_entry,omitempty"`
	// Protocol Metadata
	MetadataConjure                               *MetadataConjure       `protobuf:"bytes,5,opt,name=metadata_conjure,json=metadataConjure,proto3,oneof" json:"metadata_conjure,omitempty"`
	MetadataInproxy                               *MetadataInproxy       `protobuf:"bytes,6,opt,name=metadata_inproxy,json=metadataInproxy,proto3,oneof" json:"metadata_inproxy,omitempty"`
	MetadataMeek                                  *MetadataMeek          `protobuf:"bytes,7,opt,name=metadata_meek,json=metadataMeek,proto3,oneof" json:"metadata_meek,omitempty"`
	MetadataQuic                                  *MetadataQuic          `protobuf:"bytes,8,opt,name=metadata_quic,json=metadataQuic,proto3,oneof" json:"metadata_quic,omitempty"`
	MetadataShadowsocks                           *MetadataShadowsocks   `protobuf:"bytes,9,opt,name=metadata_shadowsocks,json=metadataShadowsocks,proto3,oneof" json:"metadata_shadowsocks,omitempty"`
	MetadataTls                                   *MetadataTLS           `protobuf:"bytes,10,opt,name=metadata_tls,json=metadataTls,proto3,oneof" json:"metadata_tls,omitempty"`
	TunnelId                                      *string                `protobuf:"bytes,100,opt,name=tunnel_id,json=tunnelId,proto3,oneof" json:"tunnel_id,omitempty"`
	AppliedTacticsTag                             *string                `protobuf:"bytes,101,opt,name=applied_tactics_tag,json=appliedTacticsTag,proto3,oneof" json:"applied_tactics_tag,omitempty"`       //LowCardinality
	AuthorizedAccessTypes                         []string               `protobuf:"bytes,102,rep,name=authorized_access_types,json=authorizedAccessTypes,proto3" json:"authorized_access_types,omitempty"` //LowCardinality
	BurstDownstreamFirstBytes                     *int64                 `protobuf:"varint,103,opt,name=burst_downstream_first_bytes,json=burstDownstreamFirstBytes,proto3,oneof" json:"burst_downstream_first_bytes,omitempty"`
	BurstDownstreamFirstDuration                  *int64                 `protobuf:"varint,104,opt,name=burst_downstream_first_duration,json=burstDownstreamFirstDuration,proto3,oneof" json:"burst_downstream_first_duration,omitempty"`
	BurstDownstreamFirstOffset                    *int64                 `protobuf:"varint,105,opt,name=burst_downstream_first_offset,json=burstDownstreamFirstOffset,proto3,oneof" json:"burst_downstream_first_offset,omitempty"`
	BurstDownstreamFirstRate                      *int64                 `protobuf:"varint,106,opt,name=burst_downstream_first_rate,json=burstDownstreamFirstRate,proto3,oneof" json:"burst_downstream_first_rate,omitempty"`
	BurstDownstreamLastBytes                      *int64                 `protobuf:"varint,107,opt,name=burst_downstream_last_bytes,json=burstDownstreamLastBytes,proto3,oneof" json:"burst_downstream_last_bytes,omitempty"`
	BurstDownstreamLastDuration                   *int64                 `protobuf:"varint,108,opt,name=burst_downstream_last_duration,json=burstDownstreamLastDuration,proto3,oneof" json:"burst_downstream_last_duration,omitempty"`
	BurstDownstreamLastOffset                     *int64                 `protobuf:"varint,109,opt,name=burst_downstream_last_offset,json=burstDownstreamLastOffset,proto3,oneof" json:"burst_downstream_last_offset,omitempty"`
	BurstDownstreamLastRate                       *int64                 `protobuf:"varint,110,opt,name=burst_downstream_last_rate,json=burstDownstreamLastRate,proto3,oneof" json:"burst_downstream_last_rate,omitempty"`
	BurstDownstreamMaxBytes                       *int64                 `protobuf:"varint,111,opt,name=burst_downstream_max_bytes,json=burstDownstreamMaxBytes,proto3,oneof" json:"burst_downstream_max_bytes,omitempty"`
	BurstDownstreamMaxDuration                    *int64                 `protobuf:"varint,112,opt,name=burst_downstream_max_duration,json=burstDownstreamMaxDuration,proto3,oneof" json:"burst_downstream_max_duration,omitempty"`
	BurstDownstreamMaxOffset                      *int64                 `protobuf:"varint,113,opt,name=burst_downstream_max_offset,json=burstDownstreamMaxOffset,proto3,oneof" json:"burst_downstream_max_offset,omitempty"`
	BurstDownstreamMaxRate                        *int64                 `protobuf:"varint,114,opt,name=burst_downstream_max_rate,json=burstDownstreamMaxRate,proto3,oneof" json:"burst_downstream_max_rate,omitempty"`
	BurstDownstreamMinBytes                       *int64                 `protobuf:"varint,115,opt,name=burst_downstream_min_bytes,json=burstDownstreamMinBytes,proto3,oneof" json:"burst_downstream_min_bytes,omitempty"`
	BurstDownstreamMinDuration                    *int64                 `protobuf:"varint,116,opt,name=burst_downstream_min_duration,json=burstDownstreamMinDuration,proto3,oneof" json:"burst_downstream_min_duration,omitempty"`
	BurstDownstreamMinOffset                      *int64                 `protobuf:"varint,117,opt,name=burst_downstream_min_offset,json=burstDownstreamMinOffset,proto3,oneof" json:"burst_downstream_min_offset,omitempty"`
	BurstDownstreamMinRate                        *int64                 `protobuf:"varint,118,opt,name=burst_downstream_min_rate,json=burstDownstreamMinRate,proto3,oneof" json:"burst_downstream_min_rate,omitempty"`
	BurstUpstreamFirstBytes                       *int64                 `protobuf:"varint,119,opt,name=burst_upstream_first_bytes,json=burstUpstreamFirstBytes,proto3,oneof" json:"burst_upstream_first_bytes,omitempty"`
	BurstUpstreamFirstDuration                    *int64                 `protobuf:"varint,120,opt,name=burst_upstream_first_duration,json=burstUpstreamFirstDuration,proto3,oneof" json:"burst_upstream_first_duration,omitempty"`
	BurstUpstreamFirstOffset                      *int64                 `protobuf:"varint,121,opt,name=burst_upstream_first_offset,json=burstUpstreamFirstOffset,proto3,oneof" json:"burst_upstream_first_offset,omitempty"`
	BurstUpstreamFirstRate                        *int64                 `protobuf:"varint,122,opt,name=burst_upstream_first_rate,json=burstUpstreamFirstRate,proto3,oneof" json:"burst_upstream_first_rate,omitempty"`
	BurstUpstreamLastBytes                        *int64                 `protobuf:"varint,123,opt,name=burst_upstream_last_bytes,json=burstUpstreamLastBytes,proto3,oneof" json:"burst_upstream_last_bytes,omitempty"`
	BurstUpstreamLastDuration                     *int64                 `protobuf:"varint,124,opt,name=burst_upstream_last_duration,json=burstUpstreamLastDuration,proto3,oneof" json:"burst_upstream_last_duration,omitempty"`
	BurstUpstreamLastOffset                       *int64                 `protobuf:"varint,125,opt,name=burst_upstream_last_offset,json=burstUpstreamLastOffset,proto3,oneof" json:"burst_upstream_last_offset,omitempty"`
	BurstUpstreamLastRate                         *int64                 `protobuf:"varint,126,opt,name=burst_upstream_last_rate,json=burstUpstreamLastRate,proto3,oneof" json:"burst_upstream_last_rate,omitempty"`
	BurstUpstreamMaxBytes                         *int64                 `protobuf:"varint,127,opt,name=burst_upstream_max_bytes,json=burstUpstreamMaxBytes,proto3,oneof" json:"burst_upstream_max_bytes,omitempty"`
	BurstUpstreamMaxDuration                      *int64                 `protobuf:"varint,128,opt,name=burst_upstream_max_duration,json=burstUpstreamMaxDuration,proto3,oneof" json:"burst_upstream_max_duration,omitempty"`
	BurstUpstreamMaxOffset                        *int64                 `protobuf:"varint,129,opt,name=burst_upstream_max_offset,json=burstUpstreamMaxOffset,proto3,oneof" json:"burst_upstream_max_offset,omitempty"`
	BurstUpstreamMaxRate                          *int64                 `protobuf:"varint,130,opt,name=burst_upstream_max_rate,json=burstUpstreamMaxRate,proto3,oneof" json:"burst_upstream_max_rate,omitempty"`
	BurstUpstreamMinBytes                         *int64                 `protobuf:"varint,131,opt,name=burst_upstream_min_bytes,json=burstUpstreamMinBytes,proto3,oneof" json:"burst_upstream_min_bytes,omitempty"`
	BurstUpstreamMinDuration                      *int64                 `protobuf:"varint,132,opt,name=burst_upstream_min_duration,json=burstUpstreamMinDuration,proto3,oneof" json:"burst_upstream_min_duration,omitempty"`
	BurstUpstreamMinOffset                        *int64                 `protobuf:"varint,133,opt,name=burst_upstream_min_offset,json=burstUpstreamMinOffset,proto3,oneof" json:"burst_upstream_min_offset,omitempty"`
	BurstUpstreamMinRate                          *int64                 `protobuf:"varint,134,opt,name=burst_upstream_min_rate,json=burstUpstreamMinRate,proto3,oneof" json:"burst_upstream_min_rate,omitempty"`
	Bytes                                         *int64                 `protobuf:"varint,135,opt,name=bytes,proto3,oneof" json:"bytes,omitempty"`
	BytesDownTcp                                  *int64                 `protobuf:"varint,136,opt,name=bytes_down_tcp,json=bytesDownTcp,proto3,oneof" json:"bytes_down_tcp,omitempty"`
	BytesDownUdp                                  *int64                 `protobuf:"varint,137,opt,name=bytes_down_udp,json=bytesDownUdp,proto3,oneof" json:"bytes_down_udp,omitempty"`
	BytesUpTcp                                    *int64                 `protobuf:"varint,138,opt,name=bytes_up_tcp,json=bytesUpTcp,proto3,oneof" json:"bytes_up_tcp,omitempty"`
	BytesUpUdp                                    *int64                 `protobuf:"varint,139,opt,name=bytes_up_udp,json=bytesUpUdp,proto3,oneof" json:"bytes_up_udp,omitempty"`
	CandidateNumber                               *int32                 `protobuf:"varint,140,opt,name=candidate_number,json=candidateNumber,proto3,oneof" json:"candidate_number,omitempty"`
	DialDuration                                  *int64                 `protobuf:"varint,141,opt,name=dial_duration,json=dialDuration,proto3,oneof" json:"dial_duration,omitempty"`
	DialPortNumber                                *int64                 `protobuf:"varint,142,opt,name=dial_port_number,json=dialPortNumber,proto3,oneof" json:"dial_port_number,omitempty"`
	DnsAttempt                                    *int64                 `protobuf:"varint,143,opt,name=dns_attempt,json=dnsAttempt,proto3,oneof" json:"dns_attempt,omitempty"`
	DnsPreferred                                  *string                `protobuf:"bytes,144,opt,name=dns_preferred,json=dnsPreferred,proto3,oneof" json:"dns_preferred,omitempty"`       //LowCardinality
	DnsPreresolved                                *string                `protobuf:"bytes,145,opt,name=dns_preresolved,json=dnsPreresolved,proto3,oneof" json:"dns_preresolved,omitempty"` //LowCardinality
	DnsQnameMismatches                            *int64                 `protobuf:"varint,146,opt,name=dns_qname_mismatches,json=dnsQnameMismatches,proto3,oneof" json:"dns_qname_mismatches,omitempty"`
	DnsQnameRandomCasing                          *bool                  `protobuf:"varint,147,opt,name=dns_qname_random_casing,json=dnsQnameRandomCasing,proto3,oneof" json:"dns_qname_random_casing,omitempty"`
	DnsTransform                                  *string                `protobuf:"bytes,148,opt,name=dns_transform,json=dnsTransform,proto3,oneof" json:"dns_transform,omitempty"` //LowCardinality
	DownstreamBytesFragmented                     *int64                 `protobuf:"varint,149,opt,name=downstream_bytes_fragmented,json=downstreamBytesFragmented,proto3,oneof" json:"downstream_bytes_fragmented,omitempty"`
	DownstreamMaxBytesWritten                     *int64                 `protobuf:"varint,150,opt,name=downstream_max_bytes_written,json=downstreamMaxBytesWritten,proto3,oneof" json:"downstream_max_bytes_written,omitempty"`
	DownstreamMaxDelayed                          *int64                 `protobuf:"varint,151,opt,name=downstream_max_delayed,json=downstreamMaxDelayed,proto3,oneof" json:"downstream_max_delayed,omitempty"`
	DownstreamMinBytesWritten                     *int64                 `protobuf:"varint,152,opt,name=downstream_min_bytes_written,json=downstreamMinBytesWritten,proto3,oneof" json:"downstream_min_bytes_written,omitempty"`
	DownstreamMinDelayed                          *int64                 `protobuf:"varint,153,opt,name=downstream_min_delayed,json=downstreamMinDelayed,proto3,oneof" json:"downstream_min_delayed,omitempty"`
	DownstreamOsshPadding                         *int64                 `protobuf:"varint,154,opt,name=downstream_ossh_padding,json=downstreamOsshPadding,proto3,oneof" json:"downstream_ossh_padding,omitempty"`
	Duration                                      *int64                 `protobuf:"varint,155,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	EgressRegion                                  *string                `protobuf:"bytes,156,opt,name=egress_region,json=egressRegion,proto3,oneof" json:"egress_region,omitempty"` //LowCardinality
	EstablishedTunnelsCount                       *int64                 `protobuf:"varint,157,opt,name=established_tunnels_count,json=establishedTunnelsCount,proto3,oneof" json:"established_tunnels_count,omitempty"`
	EstablishmentDuration                         *int64                 `protobuf:"varint,158,opt,name=establishment_duration,json=establishmentDuration,proto3,oneof" json:"establishment_duration,omitempty"`
	FrontingProviderId                            *string                `protobuf:"bytes,159,opt,name=fronting_provider_id,json=frontingProviderId,proto3,oneof" json:"fronting_provider_id,omitempty"` //LowCardinality
	HandshakeCompleted                            *bool                  `protobuf:"varint,160,opt,name=handshake_completed,json=handshakeCompleted,proto3,oneof" json:"handshake_completed,omitempty"`
	HttpTransform                                 *string                `protobuf:"bytes,161,opt,name=http_transform,json=httpTransform,proto3,oneof" json:"http_transform,omitempty"` //LowCardinality
	IsFirstTunnelInSession                        *bool                  `protobuf:"varint,162,opt,name=is_first_tunnel_in_session,json=isFirstTunnelInSession,proto3,oneof" json:"is_first_tunnel_in_session,omitempty"`
	IsReplay                                      *bool                  `protobuf:"varint,163,opt,name=is_replay,json=isReplay,proto3,oneof" json:"is_replay,omitempty"`
	LastConnected                                 *timestamppb.Timestamp `protobuf:"bytes,164,opt,name=last_connected,json=lastConnected,proto3,oneof" json:"last_connected,omitempty"`
	NetworkLatencyMultiplier                      *float64               `protobuf:"fixed64,165,opt,name=network_latency_multiplier,json=networkLatencyMultiplier,proto3,oneof" json:"network_latency_multiplier,omitempty"`
	NetworkType                                   *string                `protobuf:"bytes,166,opt,name=network_type,json=networkType,proto3,oneof" json:"network_type,omitempty"`         //LowCardinality
	NewTacticsTag                                 *string                `protobuf:"bytes,167,opt,name=new_tactics_tag,json=newTacticsTag,proto3,oneof" json:"new_tactics_tag,omitempty"` //LowCardinality
	OsshPrefix                                    *string                `protobuf:"bytes,168,opt,name=ossh_prefix,json=osshPrefix,proto3,oneof" json:"ossh_prefix,omitempty"`            //LowCardinality
	PadResponse                                   *int64                 `protobuf:"varint,169,opt,name=pad_response,json=padResponse,proto3,oneof" json:"pad_response,omitempty"`
	Padding                                       *int64                 `protobuf:"varint,170,opt,name=padding,proto3,oneof" json:"padding,omitempty"`
	PassthroughAddress                            *string                `protobuf:"bytes,171,opt,name=passthrough_address,json=passthroughAddress,proto3,oneof" json:"passthrough_address,omitempty"` //LowCardinality
	PeakConcurrentDialingPortForwardCountTcp      *int64                 `protobuf:"varint,172,opt,name=peak_concurrent_dialing_port_forward_count_tcp,json=peakConcurrentDialingPortForwardCountTcp,proto3,oneof" json:"peak_concurrent_dialing_port_forward_count_tcp,omitempty"`
	PeakConcurrentPortForwardCountTcp             *int64                 `protobuf:"varint,173,opt,name=peak_concurrent_port_forward_count_tcp,json=peakConcurrentPortForwardCountTcp,proto3,oneof" json:"peak_concurrent_port_forward_count_tcp,omitempty"`
	PeakConcurrentPortForwardCountUdp             *int64                 `protobuf:"varint,174,opt,name=peak_concurrent_port_forward_count_udp,json=peakConcurrentPortForwardCountUdp,proto3,oneof" json:"peak_concurrent_port_forward_count_udp,omitempty"`
	PeakConcurrentProximateAcceptedClients        *int64                 `protobuf:"varint,175,opt,name=peak_concurrent_proximate_accepted_clients,json=peakConcurrentProximateAcceptedClients,proto3,oneof" json:"peak_concurrent_proximate_accepted_clients,omitempty"`
	PeakConcurrentProximateEstablishedClients     *int64                 `protobuf:"varint,176,opt,name=peak_concurrent_proximate_established_clients,json=peakConcurrentProximateEstablishedClients,proto3,oneof" json:"peak_concurrent_proximate_established_clients,omitempty"`
	PeakDnsFailureRate                            *float64               `protobuf:"fixed64,177,opt,name=peak_dns_failure_rate,json=peakDnsFailureRate,proto3,oneof" json:"peak_dns_failure_rate,omitempty"`
	PeakDnsFailureRateSampleSize                  *int64                 `protobuf:"varint,178,opt,name=peak_dns_failure_rate_sample_size,json=peakDnsFailureRateSampleSize,proto3,oneof" json:"peak_dns_failure_rate_sample_size,omitempty"`
	PeakTcpPortForwardFailureRate                 *float64               `protobuf:"fixed64,179,opt,name=peak_tcp_port_forward_failure_rate,json=peakTcpPortForwardFailureRate,proto3,oneof" json:"peak_tcp_port_forward_failure_rate,omitempty"`
	PeakTcpPortForwardFailureRateSampleSize       *int64                 `protobuf:"varint,180,opt,name=peak_tcp_port_forward_failure_rate_sample_size,json=peakTcpPortForwardFailureRateSampleSize,proto3,oneof" json:"peak_tcp_port_forward_failure_rate_sample_size,omitempty"`
	PreHandshakeRandomStreamCount                 *int64                 `protobuf:"varint,181,opt,name=pre_handshake_random_stream_count,json=preHandshakeRandomStreamCount,proto3,oneof" json:"pre_handshake_random_stream_count,omitempty"`
	PreHandshakeRandomStreamDownstreamBytes       *int64                 `protobuf:"varint,182,opt,name=pre_handshake_random_stream_downstream_bytes,json=preHandshakeRandomStreamDownstreamBytes,proto3,oneof" json:"pre_handshake_random_stream_downstream_bytes,omitempty"`
	PreHandshakeRandomStreamReceivedUpstreamBytes *int64                 `protobuf:"varint,183,opt,name=pre_handshake_random_stream_received_upstream_bytes,json=preHandshakeRandomStreamReceivedUpstreamBytes,proto3,oneof" json:"pre_handshake_random_stream_received_upstream_bytes,omitempty"`
	PreHandshakeRandomStreamSentDownstreamBytes   *int64                 `protobuf:"varint,184,opt,name=pre_handshake_random_stream_sent_downstream_bytes,json=preHandshakeRandomStreamSentDownstreamBytes,proto3,oneof" json:"pre_handshake_random_stream_sent_downstream_bytes,omitempty"`
	PreHandshakeRandomStreamUpstreamBytes         *int64                 `protobuf:"varint,185,opt,name=pre_handshake_random_stream_upstream_bytes,json=preHandshakeRandomStreamUpstreamBytes,proto3,oneof" json:"pre_handshake_random_stream_upstream_bytes,omitempty"`
	RelayProtocol                                 *string                `protobuf:"bytes,186,opt,name=relay_protocol,json=relayProtocol,proto3,oneof" json:"relay_protocol,omitempty"` //LowCardinality
	SeedTransform                                 *string                `protobuf:"bytes,187,opt,name=seed_transform,json=seedTransform,proto3,oneof" json:"seed_transform,omitempty"` //LowCardinality
	ServerBpf                                     *string                `protobuf:"bytes,188,opt,name=server_bpf,json=serverBpf,proto3,oneof" json:"server_bpf,omitempty"`             //LowCardinality
	SplitTunnel                                   *bool                  `protobuf:"varint,189,opt,name=split_tunnel,json=splitTunnel,proto3,oneof" json:"split_tunnel,omitempty"`
	SshClientVersion                              *string                `protobuf:"bytes,190,opt,name=ssh_client_version,json=sshClientVersion,proto3,oneof" json:"ssh_client_version,omitempty"` //LowCardinality
	StartTime                                     *timestamppb.Timestamp `protobuf:"bytes,191,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	StationIpAddress                              *string                `protobuf:"bytes,192,opt,name=station_ip_address,json=stationIpAddress,proto3,oneof" json:"station_ip_address,omitempty"` //LowCardinality
	TotalPacketTunnelChannelCount                 *int64                 `protobuf:"varint,193,opt,name=total_packet_tunnel_channel_count,json=totalPacketTunnelChannelCount,proto3,oneof" json:"total_packet_tunnel_channel_count,omitempty"`
	TotalPortForwardCountTcp                      *int64                 `protobuf:"varint,194,opt,name=total_port_forward_count_tcp,json=totalPortForwardCountTcp,proto3,oneof" json:"total_port_forward_count_tcp,omitempty"`
	TotalPortForwardCountUdp                      *int64                 `protobuf:"varint,195,opt,name=total_port_forward_count_udp,json=totalPortForwardCountUdp,proto3,oneof" json:"total_port_forward_count_udp,omitempty"`
	TotalUdpgwChannelCount                        *int64                 `protobuf:"varint,196,opt,name=total_udpgw_channel_count,json=totalUdpgwChannelCount,proto3,oneof" json:"total_udpgw_channel_count,omitempty"`
	UpstreamBytesFragmented                       *int64                 `protobuf:"varint,197,opt,name=upstream_bytes_fragmented,json=upstreamBytesFragmented,proto3,oneof" json:"upstream_bytes_fragmented,omitempty"`
	UpstreamMaxBytesWritten                       *int64                 `protobuf:"varint,198,opt,name=upstream_max_bytes_written,json=upstreamMaxBytesWritten,proto3,oneof" json:"upstream_max_bytes_written,omitempty"`
	UpstreamMaxDelayed                            *int64                 `protobuf:"varint,199,opt,name=upstream_max_delayed,json=upstreamMaxDelayed,proto3,oneof" json:"upstream_max_delayed,omitempty"`
	UpstreamMinBytesWritten                       *int64                 `protobuf:"varint,200,opt,name=upstream_min_bytes_written,json=upstreamMinBytesWritten,proto3,oneof" json:"upstream_min_bytes_written,omitempty"`
	UpstreamMinDelayed                            *int64                 `protobuf:"varint,201,opt,name=upstream_min_delayed,json=upstreamMinDelayed,proto3,oneof" json:"upstream_min_delayed,omitempty"`
	UpstreamOsshPadding                           *int64                 `protobuf:"varint,202,opt,name=upstream_ossh_padding,json=upstreamOsshPadding,proto3,oneof" json:"upstream_ossh_padding,omitempty"`
	UpstreamProxyCustomHeaderNames                *string                `protobuf:"bytes,203,opt,name=upstream_proxy_custom_header_names,json=upstreamProxyCustomHeaderNames,proto3,oneof" json:"upstream_proxy_custom_header_names,omitempty"` //LowCardinality
	UpstreamProxyType                             *string                `protobuf:"bytes,204,opt,name=upstream_proxy_type,json=upstreamProxyType,proto3,oneof" json:"upstream_proxy_type,omitempty"`                                            //LowCardinality
	UserAgent                                     *string                `protobuf:"bytes,205,opt,name=user_agent,json=userAgent,proto3,oneof" json:"user_agent,omitempty"`
	// Post-handshake random stream fields
	RandomStreamCount                 *int64 `protobuf:"varint,26,opt,name=random_stream_count,json=randomStreamCount,proto3,oneof" json:"random_stream_count,omitempty"`
	RandomStreamUpstreamBytes         *int64 `protobuf:"varint,207,opt,name=random_stream_upstream_bytes,json=randomStreamUpstreamBytes,proto3,oneof" json:"random_stream_upstream_bytes,omitempty"`
	RandomStreamReceivedUpstreamBytes *int64 `protobuf:"varint,208,opt,name=random_stream_received_upstream_bytes,json=randomStreamReceivedUpstreamBytes,proto3,oneof" json:"random_stream_received_upstream_bytes,omitempty"`
	RandomStreamDownstreamBytes       *int64 `protobuf:"varint,209,opt,name=random_stream_downstream_bytes,json=randomStreamDownstreamBytes,proto3,oneof" json:"random_stream_downstream_bytes,omitempty"`
	RandomStreamSentDownstreamBytes   *int64 `protobuf:"varint,210,opt,name=random_stream_sent_downstream_bytes,json=randomStreamSentDownstreamBytes,proto3,oneof" json:"random_stream_sent_downstream_bytes,omitempty"`
	// Destination bytes fields (legacy format)
	DestBytesAsn     *string `protobuf:"bytes,211,opt,name=dest_bytes_asn,json=destBytesAsn,proto3,oneof" json:"dest_bytes_asn,omitempty"`
	DestBytes        *int64  `protobuf:"varint,212,opt,name=dest_bytes,json=destBytes,proto3,oneof" json:"dest_bytes,omitempty"`
	DestBytesUpTcp   *int64  `protobuf:"varint,213,opt,name=dest_bytes_up_tcp,json=destBytesUpTcp,proto3,oneof" json:"dest_bytes_up_tcp,omitempty"`
	DestBytesDownTcp *int64  `protobuf:"varint,214,opt,name=dest_bytes_down_tcp,json=destBytesDownTcp,proto3,oneof" json:"dest_bytes_down_tcp,omitempty"`
	DestBytesUpUdp   *int64  `protobuf:"varint,215,opt,name=dest_bytes_up_udp,json=destBytesUpUdp,proto3,oneof" json:"dest_bytes_up_udp,omitempty"`
	DestBytesDownUdp *int64  `protobuf:"varint,216,opt,name=dest_bytes_down_udp,json=destBytesDownUdp,proto3,oneof" json:"dest_bytes_down_udp,omitempty"`
	// Additional transport and server entry fields
	RelayedSteeringIp           *string `protobuf:"bytes,217,opt,name=relayed_steering_ip,json=relayedSteeringIp,proto3,oneof" json:"relayed_steering_ip,omitempty"`
	RequestCheckServerEntryTags *int64  `protobuf:"varint,218,opt,name=request_check_server_entry_tags,json=requestCheckServerEntryTags,proto3,oneof" json:"request_check_server_entry_tags,omitempty"`
	CheckedServerEntryTags      *int64  `protobuf:"varint,219,opt,name=checked_server_entry_tags,json=checkedServerEntryTags,proto3,oneof" json:"checked_server_entry_tags,omitempty"`
	InvalidServerEntryTags      *int64  `protobuf:"varint,220,opt,name=invalid_server_entry_tags,json=invalidServerEntryTags,proto3,oneof" json:"invalid_server_entry_tags,omitempty"`
	// Protocol Overhead
	SshProtocolBytes         *int64 `protobuf:"varint,221,opt,name=ssh_protocol_bytes,json=sshProtocolBytes,proto3,oneof" json:"ssh_protocol_bytes,omitempty"`
	SshProtocolBytesOverhead *int64 `protobuf:"varint,222,opt,name=ssh_protocol_bytes_overhead,json=sshProtocolBytesOverhead,proto3,oneof" json:"ssh_protocol_bytes_overhead,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ServerTunnel) Reset() {
	*x = ServerTunnel{}
	mi := &file_proto_server_tunnel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerTunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTunnel) ProtoMessage() {}

func (x *ServerTunnel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_tunnel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTunnel.ProtoReflect.Descriptor instead.
func (*ServerTunnel) Descriptor() ([]byte, []int) {
	return file_proto_server_tunnel_proto_rawDescGZIP(), []int{0}
}

func (x *ServerTunnel) GetMetadataClient() *MetadataClient {
	if x != nil {
		return x.MetadataClient
	}
	return nil
}

func (x *ServerTunnel) GetMetadataDevice() *MetadataDevice {
	if x != nil {
		return x.MetadataDevice
	}
	return nil
}

func (x *ServerTunnel) GetMetadataSession() *MetadataSession {
	if x != nil {
		return x.MetadataSession
	}
	return nil
}

func (x *ServerTunnel) GetMetadataServerEntry() *MetadataServerEntry {
	if x != nil {
		return x.MetadataServerEntry
	}
	return nil
}

func (x *ServerTunnel) GetMetadataConjure() *MetadataConjure {
	if x != nil {
		return x.MetadataConjure
	}
	return nil
}

func (x *ServerTunnel) GetMetadataInproxy() *MetadataInproxy {
	if x != nil {
		return x.MetadataInproxy
	}
	return nil
}

func (x *ServerTunnel) GetMetadataMeek() *MetadataMeek {
	if x != nil {
		return x.MetadataMeek
	}
	return nil
}

func (x *ServerTunnel) GetMetadataQuic() *MetadataQuic {
	if x != nil {
		return x.MetadataQuic
	}
	return nil
}

func (x *ServerTunnel) GetMetadataShadowsocks() *MetadataShadowsocks {
	if x != nil {
		return x.MetadataShadowsocks
	}
	return nil
}

func (x *ServerTunnel) GetMetadataTls() *MetadataTLS {
	if x != nil {
		return x.MetadataTls
	}
	return nil
}

func (x *ServerTunnel) GetTunnelId() string {
	if x != nil && x.TunnelId != nil {
		return *x.TunnelId
	}
	return ""
}

func (x *ServerTunnel) GetAppliedTacticsTag() string {
	if x != nil && x.AppliedTacticsTag != nil {
		return *x.AppliedTacticsTag
	}
	return ""
}

func (x *ServerTunnel) GetAuthorizedAccessTypes() []string {
	if x != nil {
		return x.AuthorizedAccessTypes
	}
	return nil
}

func (x *ServerTunnel) GetBurstDownstreamFirstBytes() int64 {
	if x != nil && x.BurstDownstreamFirstBytes != nil {
		return *x.BurstDownstreamFirstBytes
	}
	return 0
}

func (x *ServerTunnel) GetBurstDownstreamFirstDuration() int64 {
	if x != nil && x.BurstDownstreamFirstDuration != nil {
		return *x.BurstDownstreamFirstDuration
	}
	return 0
}

func (x *ServerTunnel) GetBurstDownstreamFirstOffset() int64 {
	if x != nil && x.BurstDownstreamFirstOffset != nil {
		return *x.BurstDownstreamFirstOffset
	}
	return 0
}

func (x *ServerTunnel) GetBurstDownstreamFirstRate() int64 {
	if x != nil && x.BurstDownstreamFirstRate != nil {
		return *x.BurstDownstreamFirstRate
	}
	return 0
}

func (x *ServerTunnel) GetBurstDownstreamLastBytes() int64 {
	if x != nil && x.BurstDownstreamLastBytes != nil {
		return *x.BurstDownstreamLastBytes
	}
	return 0
}

func (x *ServerTunnel) GetBurstDownstreamLastDuration() int64 {
	if x != nil && x.BurstDownstreamLastDuration != nil {
		return *x.BurstDownstreamLastDuration
	}
	return 0
}

func (x *ServerTunnel) GetBurstDownstreamLastOffset() int64 {
	if x != nil && x.BurstDownstreamLastOffset != nil {
		return *x.BurstDownstreamLastOffset
	}
	return 0
}

func (x *ServerTunnel) GetBurstDownstreamLastRate() int64 {
	if x != nil && x.BurstDownstreamLastRate != nil {
		return *x.BurstDownstreamLastRate
	}
	return 0
}

func (x *ServerTunnel) GetBurstDownstreamMaxBytes() int64 {
	if x != nil && x.BurstDownstreamMaxBytes != nil {
		return *x.BurstDownstreamMaxBytes
	}
	return 0
}

func (x *ServerTunnel) GetBurstDownstreamMaxDuration() int64 {
	if x != nil && x.BurstDownstreamMaxDuration != nil {
		return *x.BurstDownstreamMaxDuration
	}
	return 0
}

func (x *ServerTunnel) GetBurstDownstreamMaxOffset() int64 {
	if x != nil && x.BurstDownstreamMaxOffset != nil {
		return *x.BurstDownstreamMaxOffset
	}
	return 0
}

func (x *ServerTunnel) GetBurstDownstreamMaxRate() int64 {
	if x != nil && x.BurstDownstreamMaxRate != nil {
		return *x.BurstDownstreamMaxRate
	}
	return 0
}

func (x *ServerTunnel) GetBurstDownstreamMinBytes() int64 {
	if x != nil && x.BurstDownstreamMinBytes != nil {
		return *x.BurstDownstreamMinBytes
	}
	return 0
}

func (x *ServerTunnel) GetBurstDownstreamMinDuration() int64 {
	if x != nil && x.BurstDownstreamMinDuration != nil {
		return *x.BurstDownstreamMinDuration
	}
	return 0
}

func (x *ServerTunnel) GetBurstDownstreamMinOffset() int64 {
	if x != nil && x.BurstDownstreamMinOffset != nil {
		return *x.BurstDownstreamMinOffset
	}
	return 0
}

func (x *ServerTunnel) GetBurstDownstreamMinRate() int64 {
	if x != nil && x.BurstDownstreamMinRate != nil {
		return *x.BurstDownstreamMinRate
	}
	return 0
}

func (x *ServerTunnel) GetBurstUpstreamFirstBytes() int64 {
	if x != nil && x.BurstUpstreamFirstBytes != nil {
		return *x.BurstUpstreamFirstBytes
	}
	return 0
}

func (x *ServerTunnel) GetBurstUpstreamFirstDuration() int64 {
	if x != nil && x.BurstUpstreamFirstDuration != nil {
		return *x.BurstUpstreamFirstDuration
	}
	return 0
}

func (x *ServerTunnel) GetBurstUpstreamFirstOffset() int64 {
	if x != nil && x.BurstUpstreamFirstOffset != nil {
		return *x.BurstUpstreamFirstOffset
	}
	return 0
}

func (x *ServerTunnel) GetBurstUpstreamFirstRate() int64 {
	if x != nil && x.BurstUpstreamFirstRate != nil {
		return *x.BurstUpstreamFirstRate
	}
	return 0
}

func (x *ServerTunnel) GetBurstUpstreamLastBytes() int64 {
	if x != nil && x.BurstUpstreamLastBytes != nil {
		return *x.BurstUpstreamLastBytes
	}
	return 0
}

func (x *ServerTunnel) GetBurstUpstreamLastDuration() int64 {
	if x != nil && x.BurstUpstreamLastDuration != nil {
		return *x.BurstUpstreamLastDuration
	}
	return 0
}

func (x *ServerTunnel) GetBurstUpstreamLastOffset() int64 {
	if x != nil && x.BurstUpstreamLastOffset != nil {
		return *x.BurstUpstreamLastOffset
	}
	return 0
}

func (x *ServerTunnel) GetBurstUpstreamLastRate() int64 {
	if x != nil && x.BurstUpstreamLastRate != nil {
		return *x.BurstUpstreamLastRate
	}
	return 0
}

func (x *ServerTunnel) GetBurstUpstreamMaxBytes() int64 {
	if x != nil && x.BurstUpstreamMaxBytes != nil {
		return *x.BurstUpstreamMaxBytes
	}
	return 0
}

func (x *ServerTunnel) GetBurstUpstreamMaxDuration() int64 {
	if x != nil && x.BurstUpstreamMaxDuration != nil {
		return *x.BurstUpstreamMaxDuration
	}
	return 0
}

func (x *ServerTunnel) GetBurstUpstreamMaxOffset() int64 {
	if x != nil && x.BurstUpstreamMaxOffset != nil {
		return *x.BurstUpstreamMaxOffset
	}
	return 0
}

func (x *ServerTunnel) GetBurstUpstreamMaxRate() int64 {
	if x != nil && x.BurstUpstreamMaxRate != nil {
		return *x.BurstUpstreamMaxRate
	}
	return 0
}

func (x *ServerTunnel) GetBurstUpstreamMinBytes() int64 {
	if x != nil && x.BurstUpstreamMinBytes != nil {
		return *x.BurstUpstreamMinBytes
	}
	return 0
}

func (x *ServerTunnel) GetBurstUpstreamMinDuration() int64 {
	if x != nil && x.BurstUpstreamMinDuration != nil {
		return *x.BurstUpstreamMinDuration
	}
	return 0
}

func (x *ServerTunnel) GetBurstUpstreamMinOffset() int64 {
	if x != nil && x.BurstUpstreamMinOffset != nil {
		return *x.BurstUpstreamMinOffset
	}
	return 0
}

func (x *ServerTunnel) GetBurstUpstreamMinRate() int64 {
	if x != nil && x.BurstUpstreamMinRate != nil {
		return *x.BurstUpstreamMinRate
	}
	return 0
}

func (x *ServerTunnel) GetBytes() int64 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

func (x *ServerTunnel) GetBytesDownTcp() int64 {
	if x != nil && x.BytesDownTcp != nil {
		return *x.BytesDownTcp
	}
	return 0
}

func (x *ServerTunnel) GetBytesDownUdp() int64 {
	if x != nil && x.BytesDownUdp != nil {
		return *x.BytesDownUdp
	}
	return 0
}

func (x *ServerTunnel) GetBytesUpTcp() int64 {
	if x != nil && x.BytesUpTcp != nil {
		return *x.BytesUpTcp
	}
	return 0
}

func (x *ServerTunnel) GetBytesUpUdp() int64 {
	if x != nil && x.BytesUpUdp != nil {
		return *x.BytesUpUdp
	}
	return 0
}

func (x *ServerTunnel) GetCandidateNumber() int32 {
	if x != nil && x.CandidateNumber != nil {
		return *x.CandidateNumber
	}
	return 0
}

func (x *ServerTunnel) GetDialDuration() int64 {
	if x != nil && x.DialDuration != nil {
		return *x.DialDuration
	}
	return 0
}

func (x *ServerTunnel) GetDialPortNumber() int64 {
	if x != nil && x.DialPortNumber != nil {
		return *x.DialPortNumber
	}
	return 0
}

func (x *ServerTunnel) GetDnsAttempt() int64 {
	if x != nil && x.DnsAttempt != nil {
		return *x.DnsAttempt
	}
	return 0
}

func (x *ServerTunnel) GetDnsPreferred() string {
	if x != nil && x.DnsPreferred != nil {
		return *x.DnsPreferred
	}
	return ""
}

func (x *ServerTunnel) GetDnsPreresolved() string {
	if x != nil && x.DnsPreresolved != nil {
		return *x.DnsPreresolved
	}
	return ""
}

func (x *ServerTunnel) GetDnsQnameMismatches() int64 {
	if x != nil && x.DnsQnameMismatches != nil {
		return *x.DnsQnameMismatches
	}
	return 0
}

func (x *ServerTunnel) GetDnsQnameRandomCasing() bool {
	if x != nil && x.DnsQnameRandomCasing != nil {
		return *x.DnsQnameRandomCasing
	}
	return false
}

func (x *ServerTunnel) GetDnsTransform() string {
	if x != nil && x.DnsTransform != nil {
		return *x.DnsTransform
	}
	return ""
}

func (x *ServerTunnel) GetDownstreamBytesFragmented() int64 {
	if x != nil && x.DownstreamBytesFragmented != nil {
		return *x.DownstreamBytesFragmented
	}
	return 0
}

func (x *ServerTunnel) GetDownstreamMaxBytesWritten() int64 {
	if x != nil && x.DownstreamMaxBytesWritten != nil {
		return *x.DownstreamMaxBytesWritten
	}
	return 0
}

func (x *ServerTunnel) GetDownstreamMaxDelayed() int64 {
	if x != nil && x.DownstreamMaxDelayed != nil {
		return *x.DownstreamMaxDelayed
	}
	return 0
}

func (x *ServerTunnel) GetDownstreamMinBytesWritten() int64 {
	if x != nil && x.DownstreamMinBytesWritten != nil {
		return *x.DownstreamMinBytesWritten
	}
	return 0
}

func (x *ServerTunnel) GetDownstreamMinDelayed() int64 {
	if x != nil && x.DownstreamMinDelayed != nil {
		return *x.DownstreamMinDelayed
	}
	return 0
}

func (x *ServerTunnel) GetDownstreamOsshPadding() int64 {
	if x != nil && x.DownstreamOsshPadding != nil {
		return *x.DownstreamOsshPadding
	}
	return 0
}

func (x *ServerTunnel) GetDuration() int64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *ServerTunnel) GetEgressRegion() string {
	if x != nil && x.EgressRegion != nil {
		return *x.EgressRegion
	}
	return ""
}

func (x *ServerTunnel) GetEstablishedTunnelsCount() int64 {
	if x != nil && x.EstablishedTunnelsCount != nil {
		return *x.EstablishedTunnelsCount
	}
	return 0
}

func (x *ServerTunnel) GetEstablishmentDuration() int64 {
	if x != nil && x.EstablishmentDuration != nil {
		return *x.EstablishmentDuration
	}
	return 0
}

func (x *ServerTunnel) GetFrontingProviderId() string {
	if x != nil && x.FrontingProviderId != nil {
		return *x.FrontingProviderId
	}
	return ""
}

func (x *ServerTunnel) GetHandshakeCompleted() bool {
	if x != nil && x.HandshakeCompleted != nil {
		return *x.HandshakeCompleted
	}
	return false
}

func (x *ServerTunnel) GetHttpTransform() string {
	if x != nil && x.HttpTransform != nil {
		return *x.HttpTransform
	}
	return ""
}

func (x *ServerTunnel) GetIsFirstTunnelInSession() bool {
	if x != nil && x.IsFirstTunnelInSession != nil {
		return *x.IsFirstTunnelInSession
	}
	return false
}

func (x *ServerTunnel) GetIsReplay() bool {
	if x != nil && x.IsReplay != nil {
		return *x.IsReplay
	}
	return false
}

func (x *ServerTunnel) GetLastConnected() *timestamppb.Timestamp {
	if x != nil {
		return x.LastConnected
	}
	return nil
}

func (x *ServerTunnel) GetNetworkLatencyMultiplier() float64 {
	if x != nil && x.NetworkLatencyMultiplier != nil {
		return *x.NetworkLatencyMultiplier
	}
	return 0
}

func (x *ServerTunnel) GetNetworkType() string {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return ""
}

func (x *ServerTunnel) GetNewTacticsTag() string {
	if x != nil && x.NewTacticsTag != nil {
		return *x.NewTacticsTag
	}
	return ""
}

func (x *ServerTunnel) GetOsshPrefix() string {
	if x != nil && x.OsshPrefix != nil {
		return *x.OsshPrefix
	}
	return ""
}

func (x *ServerTunnel) GetPadResponse() int64 {
	if x != nil && x.PadResponse != nil {
		return *x.PadResponse
	}
	return 0
}

func (x *ServerTunnel) GetPadding() int64 {
	if x != nil && x.Padding != nil {
		return *x.Padding
	}
	return 0
}

func (x *ServerTunnel) GetPassthroughAddress() string {
	if x != nil && x.PassthroughAddress != nil {
		return *x.PassthroughAddress
	}
	return ""
}

func (x *ServerTunnel) GetPeakConcurrentDialingPortForwardCountTcp() int64 {
	if x != nil && x.PeakConcurrentDialingPortForwardCountTcp != nil {
		return *x.PeakConcurrentDialingPortForwardCountTcp
	}
	return 0
}

func (x *ServerTunnel) GetPeakConcurrentPortForwardCountTcp() int64 {
	if x != nil && x.PeakConcurrentPortForwardCountTcp != nil {
		return *x.PeakConcurrentPortForwardCountTcp
	}
	return 0
}

func (x *ServerTunnel) GetPeakConcurrentPortForwardCountUdp() int64 {
	if x != nil && x.PeakConcurrentPortForwardCountUdp != nil {
		return *x.PeakConcurrentPortForwardCountUdp
	}
	return 0
}

func (x *ServerTunnel) GetPeakConcurrentProximateAcceptedClients() int64 {
	if x != nil && x.PeakConcurrentProximateAcceptedClients != nil {
		return *x.PeakConcurrentProximateAcceptedClients
	}
	return 0
}

func (x *ServerTunnel) GetPeakConcurrentProximateEstablishedClients() int64 {
	if x != nil && x.PeakConcurrentProximateEstablishedClients != nil {
		return *x.PeakConcurrentProximateEstablishedClients
	}
	return 0
}

func (x *ServerTunnel) GetPeakDnsFailureRate() float64 {
	if x != nil && x.PeakDnsFailureRate != nil {
		return *x.PeakDnsFailureRate
	}
	return 0
}

func (x *ServerTunnel) GetPeakDnsFailureRateSampleSize() int64 {
	if x != nil && x.PeakDnsFailureRateSampleSize != nil {
		return *x.PeakDnsFailureRateSampleSize
	}
	return 0
}

func (x *ServerTunnel) GetPeakTcpPortForwardFailureRate() float64 {
	if x != nil && x.PeakTcpPortForwardFailureRate != nil {
		return *x.PeakTcpPortForwardFailureRate
	}
	return 0
}

func (x *ServerTunnel) GetPeakTcpPortForwardFailureRateSampleSize() int64 {
	if x != nil && x.PeakTcpPortForwardFailureRateSampleSize != nil {
		return *x.PeakTcpPortForwardFailureRateSampleSize
	}
	return 0
}

func (x *ServerTunnel) GetPreHandshakeRandomStreamCount() int64 {
	if x != nil && x.PreHandshakeRandomStreamCount != nil {
		return *x.PreHandshakeRandomStreamCount
	}
	return 0
}

func (x *ServerTunnel) GetPreHandshakeRandomStreamDownstreamBytes() int64 {
	if x != nil && x.PreHandshakeRandomStreamDownstreamBytes != nil {
		return *x.PreHandshakeRandomStreamDownstreamBytes
	}
	return 0
}

func (x *ServerTunnel) GetPreHandshakeRandomStreamReceivedUpstreamBytes() int64 {
	if x != nil && x.PreHandshakeRandomStreamReceivedUpstreamBytes != nil {
		return *x.PreHandshakeRandomStreamReceivedUpstreamBytes
	}
	return 0
}

func (x *ServerTunnel) GetPreHandshakeRandomStreamSentDownstreamBytes() int64 {
	if x != nil && x.PreHandshakeRandomStreamSentDownstreamBytes != nil {
		return *x.PreHandshakeRandomStreamSentDownstreamBytes
	}
	return 0
}

func (x *ServerTunnel) GetPreHandshakeRandomStreamUpstreamBytes() int64 {
	if x != nil && x.PreHandshakeRandomStreamUpstreamBytes != nil {
		return *x.PreHandshakeRandomStreamUpstreamBytes
	}
	return 0
}

func (x *ServerTunnel) GetRelayProtocol() string {
	if x != nil && x.RelayProtocol != nil {
		return *x.RelayProtocol
	}
	return ""
}

func (x *ServerTunnel) GetSeedTransform() string {
	if x != nil && x.SeedTransform != nil {
		return *x.SeedTransform
	}
	return ""
}

func (x *ServerTunnel) GetServerBpf() string {
	if x != nil && x.ServerBpf != nil {
		return *x.ServerBpf
	}
	return ""
}

func (x *ServerTunnel) GetSplitTunnel() bool {
	if x != nil && x.SplitTunnel != nil {
		return *x.SplitTunnel
	}
	return false
}

func (x *ServerTunnel) GetSshClientVersion() string {
	if x != nil && x.SshClientVersion != nil {
		return *x.SshClientVersion
	}
	return ""
}

func (x *ServerTunnel) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ServerTunnel) GetStationIpAddress() string {
	if x != nil && x.StationIpAddress != nil {
		return *x.StationIpAddress
	}
	return ""
}

func (x *ServerTunnel) GetTotalPacketTunnelChannelCount() int64 {
	if x != nil && x.TotalPacketTunnelChannelCount != nil {
		return *x.TotalPacketTunnelChannelCount
	}
	return 0
}

func (x *ServerTunnel) GetTotalPortForwardCountTcp() int64 {
	if x != nil && x.TotalPortForwardCountTcp != nil {
		return *x.TotalPortForwardCountTcp
	}
	return 0
}

func (x *ServerTunnel) GetTotalPortForwardCountUdp() int64 {
	if x != nil && x.TotalPortForwardCountUdp != nil {
		return *x.TotalPortForwardCountUdp
	}
	return 0
}

func (x *ServerTunnel) GetTotalUdpgwChannelCount() int64 {
	if x != nil && x.TotalUdpgwChannelCount != nil {
		return *x.TotalUdpgwChannelCount
	}
	return 0
}

func (x *ServerTunnel) GetUpstreamBytesFragmented() int64 {
	if x != nil && x.UpstreamBytesFragmented != nil {
		return *x.UpstreamBytesFragmented
	}
	return 0
}

func (x *ServerTunnel) GetUpstreamMaxBytesWritten() int64 {
	if x != nil && x.UpstreamMaxBytesWritten != nil {
		return *x.UpstreamMaxBytesWritten
	}
	return 0
}

func (x *ServerTunnel) GetUpstreamMaxDelayed() int64 {
	if x != nil && x.UpstreamMaxDelayed != nil {
		return *x.UpstreamMaxDelayed
	}
	return 0
}

func (x *ServerTunnel) GetUpstreamMinBytesWritten() int64 {
	if x != nil && x.UpstreamMinBytesWritten != nil {
		return *x.UpstreamMinBytesWritten
	}
	return 0
}

func (x *ServerTunnel) GetUpstreamMinDelayed() int64 {
	if x != nil && x.UpstreamMinDelayed != nil {
		return *x.UpstreamMinDelayed
	}
	return 0
}

func (x *ServerTunnel) GetUpstreamOsshPadding() int64 {
	if x != nil && x.UpstreamOsshPadding != nil {
		return *x.UpstreamOsshPadding
	}
	return 0
}

func (x *ServerTunnel) GetUpstreamProxyCustomHeaderNames() string {
	if x != nil && x.UpstreamProxyCustomHeaderNames != nil {
		return *x.UpstreamProxyCustomHeaderNames
	}
	return ""
}

func (x *ServerTunnel) GetUpstreamProxyType() string {
	if x != nil && x.UpstreamProxyType != nil {
		return *x.UpstreamProxyType
	}
	return ""
}

func (x *ServerTunnel) GetUserAgent() string {
	if x != nil && x.UserAgent != nil {
		return *x.UserAgent
	}
	return ""
}

func (x *ServerTunnel) GetRandomStreamCount() int64 {
	if x != nil && x.RandomStreamCount != nil {
		return *x.RandomStreamCount
	}
	return 0
}

func (x *ServerTunnel) GetRandomStreamUpstreamBytes() int64 {
	if x != nil && x.RandomStreamUpstreamBytes != nil {
		return *x.RandomStreamUpstreamBytes
	}
	return 0
}

func (x *ServerTunnel) GetRandomStreamReceivedUpstreamBytes() int64 {
	if x != nil && x.RandomStreamReceivedUpstreamBytes != nil {
		return *x.RandomStreamReceivedUpstreamBytes
	}
	return 0
}

func (x *ServerTunnel) GetRandomStreamDownstreamBytes() int64 {
	if x != nil && x.RandomStreamDownstreamBytes != nil {
		return *x.RandomStreamDownstreamBytes
	}
	return 0
}

func (x *ServerTunnel) GetRandomStreamSentDownstreamBytes() int64 {
	if x != nil && x.RandomStreamSentDownstreamBytes != nil {
		return *x.RandomStreamSentDownstreamBytes
	}
	return 0
}

func (x *ServerTunnel) GetDestBytesAsn() string {
	if x != nil && x.DestBytesAsn != nil {
		return *x.DestBytesAsn
	}
	return ""
}

func (x *ServerTunnel) GetDestBytes() int64 {
	if x != nil && x.DestBytes != nil {
		return *x.DestBytes
	}
	return 0
}

func (x *ServerTunnel) GetDestBytesUpTcp() int64 {
	if x != nil && x.DestBytesUpTcp != nil {
		return *x.DestBytesUpTcp
	}
	return 0
}

func (x *ServerTunnel) GetDestBytesDownTcp() int64 {
	if x != nil && x.DestBytesDownTcp != nil {
		return *x.DestBytesDownTcp
	}
	return 0
}

func (x *ServerTunnel) GetDestBytesUpUdp() int64 {
	if x != nil && x.DestBytesUpUdp != nil {
		return *x.DestBytesUpUdp
	}
	return 0
}

func (x *ServerTunnel) GetDestBytesDownUdp() int64 {
	if x != nil && x.DestBytesDownUdp != nil {
		return *x.DestBytesDownUdp
	}
	return 0
}

func (x *ServerTunnel) GetRelayedSteeringIp() string {
	if x != nil && x.RelayedSteeringIp != nil {
		return *x.RelayedSteeringIp
	}
	return ""
}

func (x *ServerTunnel) GetRequestCheckServerEntryTags() int64 {
	if x != nil && x.RequestCheckServerEntryTags != nil {
		return *x.RequestCheckServerEntryTags
	}
	return 0
}

func (x *ServerTunnel) GetCheckedServerEntryTags() int64 {
	if x != nil && x.CheckedServerEntryTags != nil {
		return *x.CheckedServerEntryTags
	}
	return 0
}

func (x *ServerTunnel) GetInvalidServerEntryTags() int64 {
	if x != nil && x.InvalidServerEntryTags != nil {
		return *x.InvalidServerEntryTags
	}
	return 0
}

func (x *ServerTunnel) GetSshProtocolBytes() int64 {
	if x != nil && x.SshProtocolBytes != nil {
		return *x.SshProtocolBytes
	}
	return 0
}

func (x *ServerTunnel) GetSshProtocolBytesOverhead() int64 {
	if x != nil && x.SshProtocolBytesOverhead != nil {
		return *x.SshProtocolBytesOverhead
	}
	return 0
}

type ServerTunnelASNDestBytes struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TunnelId         *string                `protobuf:"bytes,100,opt,name=tunnel_id,json=tunnelId,proto3,oneof" json:"tunnel_id,omitempty"`
	DestAsn          *string                `protobuf:"bytes,101,opt,name=dest_asn,json=destAsn,proto3,oneof" json:"dest_asn,omitempty"`
	DestBytes        *int64                 `protobuf:"varint,102,opt,name=dest_bytes,json=destBytes,proto3,oneof" json:"dest_bytes,omitempty"`
	DestBytesUpTcp   *int64                 `protobuf:"varint,103,opt,name=dest_bytes_up_tcp,json=destBytesUpTcp,proto3,oneof" json:"dest_bytes_up_tcp,omitempty"`
	DestBytesDownTcp *int64                 `protobuf:"varint,104,opt,name=dest_bytes_down_tcp,json=destBytesDownTcp,proto3,oneof" json:"dest_bytes_down_tcp,omitempty"`
	DestBytesUpUdp   *int64                 `protobuf:"varint,105,opt,name=dest_bytes_up_udp,json=destBytesUpUdp,proto3,oneof" json:"dest_bytes_up_udp,omitempty"`
	DestBytesDownUdp *int64                 `protobuf:"varint,106,opt,name=dest_bytes_down_udp,json=destBytesDownUdp,proto3,oneof" json:"dest_bytes_down_udp,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ServerTunnelASNDestBytes) Reset() {
	*x = ServerTunnelASNDestBytes{}
	mi := &file_proto_server_tunnel_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerTunnelASNDestBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTunnelASNDestBytes) ProtoMessage() {}

func (x *ServerTunnelASNDestBytes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_tunnel_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTunnelASNDestBytes.ProtoReflect.Descriptor instead.
func (*ServerTunnelASNDestBytes) Descriptor() ([]byte, []int) {
	return file_proto_server_tunnel_proto_rawDescGZIP(), []int{1}
}

func (x *ServerTunnelASNDestBytes) GetTunnelId() string {
	if x != nil && x.TunnelId != nil {
		return *x.TunnelId
	}
	return ""
}

func (x *ServerTunnelASNDestBytes) GetDestAsn() string {
	if x != nil && x.DestAsn != nil {
		return *x.DestAsn
	}
	return ""
}

func (x *ServerTunnelASNDestBytes) GetDestBytes() int64 {
	if x != nil && x.DestBytes != nil {
		return *x.DestBytes
	}
	return 0
}

func (x *ServerTunnelASNDestBytes) GetDestBytesUpTcp() int64 {
	if x != nil && x.DestBytesUpTcp != nil {
		return *x.DestBytesUpTcp
	}
	return 0
}

func (x *ServerTunnelASNDestBytes) GetDestBytesDownTcp() int64 {
	if x != nil && x.DestBytesDownTcp != nil {
		return *x.DestBytesDownTcp
	}
	return 0
}

func (x *ServerTunnelASNDestBytes) GetDestBytesUpUdp() int64 {
	if x != nil && x.DestBytesUpUdp != nil {
		return *x.DestBytesUpUdp
	}
	return 0
}

func (x *ServerTunnelASNDestBytes) GetDestBytesDownUdp() int64 {
	if x != nil && x.DestBytesDownUdp != nil {
		return *x.DestBytesDownUdp
	}
	return 0
}

var File_proto_server_tunnel_proto protoreflect.FileDescriptor

const file_proto_server_tunnel_proto_rawDesc = "" +
	"\n" +
	"\x19proto/server_tunnel.proto\x12\bpsiphond\x1a\x14proto/metadata.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xcd^\n" +
	"\fServerTunnel\x12F\n" +
	"\x0fmetadata_client\x18\x01 \x01(\v2\x18.psiphond.MetadataClientH\x00R\x0emetadataClient\x88\x01\x01\x12F\n" +
	"\x0fmetadata_device\x18\x02 \x01(\v2\x18.psiphond.MetadataDeviceH\x01R\x0emetadataDevice\x88\x01\x01\x12I\n" +
	"\x10metadata_session\x18\x03 \x01(\v2\x19.psiphond.MetadataSessionH\x02R\x0fmetadataSession\x88\x01\x01\x12V\n" +
	"\x15metadata_server_entry\x18\x04 \x01(\v2\x1d.psiphond.MetadataServerEntryH\x03R\x13metadataServerEntry\x88\x01\x01\x12I\n" +
	"\x10metadata_conjure\x18\x05 \x01(\v2\x19.psiphond.MetadataConjureH\x04R\x0fmetadataConjure\x88\x01\x01\x12I\n" +
	"\x10metadata_inproxy\x18\x06 \x01(\v2\x19.psiphond.MetadataInproxyH\x05R\x0fmetadataInproxy\x88\x01\x01\x12@\n" +
	"\rmetadata_meek\x18\a \x01(\v2\x16.psiphond.MetadataMeekH\x06R\fmetadataMeek\x88\x01\x01\x12@\n" +
	"\rmetadata_quic\x18\b \x01(\v2\x16.psiphond.MetadataQuicH\aR\fmetadataQuic\x88\x01\x01\x12U\n" +
	"\x14metadata_shadowsocks\x18\t \x01(\v2\x1d.psiphond.MetadataShadowsocksH\bR\x13metadataShadowsocks\x88\x01\x01\x12=\n" +
	"\fmetadata_tls\x18\n" +
	" \x01(\v2\x15.psiphond.MetadataTLSH\tR\vmetadataTls\x88\x01\x01\x12 \n" +
	"\ttunnel_id\x18d \x01(\tH\n" +
	"R\btunnelId\x88\x01\x01\x123\n" +
	"\x13applied_tactics_tag\x18e \x01(\tH\vR\x11appliedTacticsTag\x88\x01\x01\x126\n" +
	"\x17authorized_access_types\x18f \x03(\tR\x15authorizedAccessTypes\x12D\n" +
	"\x1cburst_downstream_first_bytes\x18g \x01(\x03H\fR\x19burstDownstreamFirstBytes\x88\x01\x01\x12J\n" +
	"\x1fburst_downstream_first_duration\x18h \x01(\x03H\rR\x1cburstDownstreamFirstDuration\x88\x01\x01\x12F\n" +
	"\x1dburst_downstream_first_offset\x18i \x01(\x03H\x0eR\x1aburstDownstreamFirstOffset\x88\x01\x01\x12B\n" +
	"\x1bburst_downstream_first_rate\x18j \x01(\x03H\x0fR\x18burstDownstreamFirstRate\x88\x01\x01\x12B\n" +
	"\x1bburst_downstream_last_bytes\x18k \x01(\x03H\x10R\x18burstDownstreamLastBytes\x88\x01\x01\x12H\n" +
	"\x1eburst_downstream_last_duration\x18l \x01(\x03H\x11R\x1bburstDownstreamLastDuration\x88\x01\x01\x12D\n" +
	"\x1cburst_downstream_last_offset\x18m \x01(\x03H\x12R\x19burstDownstreamLastOffset\x88\x01\x01\x12@\n" +
	"\x1aburst_downstream_last_rate\x18n \x01(\x03H\x13R\x17burstDownstreamLastRate\x88\x01\x01\x12@\n" +
	"\x1aburst_downstream_max_bytes\x18o \x01(\x03H\x14R\x17burstDownstreamMaxBytes\x88\x01\x01\x12F\n" +
	"\x1dburst_downstream_max_duration\x18p \x01(\x03H\x15R\x1aburstDownstreamMaxDuration\x88\x01\x01\x12B\n" +
	"\x1bburst_downstream_max_offset\x18q \x01(\x03H\x16R\x18burstDownstreamMaxOffset\x88\x01\x01\x12>\n" +
	"\x19burst_downstream_max_rate\x18r \x01(\x03H\x17R\x16burstDownstreamMaxRate\x88\x01\x01\x12@\n" +
	"\x1aburst_downstream_min_bytes\x18s \x01(\x03H\x18R\x17burstDownstreamMinBytes\x88\x01\x01\x12F\n" +
	"\x1dburst_downstream_min_duration\x18t \x01(\x03H\x19R\x1aburstDownstreamMinDuration\x88\x01\x01\x12B\n" +
	"\x1bburst_downstream_min_offset\x18u \x01(\x03H\x1aR\x18burstDownstreamMinOffset\x88\x01\x01\x12>\n" +
	"\x19burst_downstream_min_rate\x18v \x01(\x03H\x1bR\x16burstDownstreamMinRate\x88\x01\x01\x12@\n" +
	"\x1aburst_upstream_first_bytes\x18w \x01(\x03H\x1cR\x17burstUpstreamFirstBytes\x88\x01\x01\x12F\n" +
	"\x1dburst_upstream_first_duration\x18x \x01(\x03H\x1dR\x1aburstUpstreamFirstDuration\x88\x01\x01\x12B\n" +
	"\x1bburst_upstream_first_offset\x18y \x01(\x03H\x1eR\x18burstUpstreamFirstOffset\x88\x01\x01\x12>\n" +
	"\x19burst_upstream_first_rate\x18z \x01(\x03H\x1fR\x16burstUpstreamFirstRate\x88\x01\x01\x12>\n" +
	"\x19burst_upstream_last_bytes\x18{ \x01(\x03H R\x16burstUpstreamLastBytes\x88\x01\x01\x12D\n" +
	"\x1cburst_upstream_last_duration\x18| \x01(\x03H!R\x19burstUpstreamLastDuration\x88\x01\x01\x12@\n" +
	"\x1aburst_upstream_last_offset\x18} \x01(\x03H\"R\x17burstUpstreamLastOffset\x88\x01\x01\x12<\n" +
	"\x18burst_upstream_last_rate\x18~ \x01(\x03H#R\x15burstUpstreamLastRate\x88\x01\x01\x12<\n" +
	"\x18burst_upstream_max_bytes\x18\x7f \x01(\x03H$R\x15burstUpstreamMaxBytes\x88\x01\x01\x12C\n" +
	"\x1bburst_upstream_max_duration\x18\x80\x01 \x01(\x03H%R\x18burstUpstreamMaxDuration\x88\x01\x01\x12?\n" +
	"\x19burst_upstream_max_offset\x18\x81\x01 \x01(\x03H&R\x16burstUpstreamMaxOffset\x88\x01\x01\x12;\n" +
	"\x17burst_upstream_max_rate\x18\x82\x01 \x01(\x03H'R\x14burstUpstreamMaxRate\x88\x01\x01\x12=\n" +
	"\x18burst_upstream_min_bytes\x18\x83\x01 \x01(\x03H(R\x15burstUpstreamMinBytes\x88\x01\x01\x12C\n" +
	"\x1bburst_upstream_min_duration\x18\x84\x01 \x01(\x03H)R\x18burstUpstreamMinDuration\x88\x01\x01\x12?\n" +
	"\x19burst_upstream_min_offset\x18\x85\x01 \x01(\x03H*R\x16burstUpstreamMinOffset\x88\x01\x01\x12;\n" +
	"\x17burst_upstream_min_rate\x18\x86\x01 \x01(\x03H+R\x14burstUpstreamMinRate\x88\x01\x01\x12\x1a\n" +
	"\x05bytes\x18\x87\x01 \x01(\x03H,R\x05bytes\x88\x01\x01\x12*\n" +
	"\x0ebytes_down_tcp\x18\x88\x01 \x01(\x03H-R\fbytesDownTcp\x88\x01\x01\x12*\n" +
	"\x0ebytes_down_udp\x18\x89\x01 \x01(\x03H.R\fbytesDownUdp\x88\x01\x01\x12&\n" +
	"\fbytes_up_tcp\x18\x8a\x01 \x01(\x03H/R\n" +
	"bytesUpTcp\x88\x01\x01\x12&\n" +
	"\fbytes_up_udp\x18\x8b\x01 \x01(\x03H0R\n" +
	"bytesUpUdp\x88\x01\x01\x12/\n" +
	"\x10candidate_number\x18\x8c\x01 \x01(\x05H1R\x0fcandidateNumber\x88\x01\x01\x12)\n" +
	"\rdial_duration\x18\x8d\x01 \x01(\x03H2R\fdialDuration\x88\x01\x01\x12.\n" +
	"\x10dial_port_number\x18\x8e\x01 \x01(\x03H3R\x0edialPortNumber\x88\x01\x01\x12%\n" +
	"\vdns_attempt\x18\x8f\x01 \x01(\x03H4R\n" +
	"dnsAttempt\x88\x01\x01\x12)\n" +
	"\rdns_preferred\x18\x90\x01 \x01(\tH5R\fdnsPreferred\x88\x01\x01\x12-\n" +
	"\x0fdns_preresolved\x18\x91\x01 \x01(\tH6R\x0ednsPreresolved\x88\x01\x01\x126\n" +
	"\x14dns_qname_mismatches\x18\x92\x01 \x01(\x03H7R\x12dnsQnameMismatches\x88\x01\x01\x12;\n" +
	"\x17dns_qname_random_casing\x18\x93\x01 \x01(\bH8R\x14dnsQnameRandomCasing\x88\x01\x01\x12)\n" +
	"\rdns_transform\x18\x94\x01 \x01(\tH9R\fdnsTransform\x88\x01\x01\x12D\n" +
	"\x1bdownstream_bytes_fragmented\x18\x95\x01 \x01(\x03H:R\x19downstreamBytesFragmented\x88\x01\x01\x12E\n" +
	"\x1cdownstream_max_bytes_written\x18\x96\x01 \x01(\x03H;R\x19downstreamMaxBytesWritten\x88\x01\x01\x12:\n" +
	"\x16downstream_max_delayed\x18\x97\x01 \x01(\x03H<R\x14downstreamMaxDelayed\x88\x01\x01\x12E\n" +
	"\x1cdownstream_min_bytes_written\x18\x98\x01 \x01(\x03H=R\x19downstreamMinBytesWritten\x88\x01\x01\x12:\n" +
	"\x16downstream_min_delayed\x18\x99\x01 \x01(\x03H>R\x14downstreamMinDelayed\x88\x01\x01\x12<\n" +
	"\x17downstream_ossh_padding\x18\x9a\x01 \x01(\x03H?R\x15downstreamOsshPadding\x88\x01\x01\x12 \n" +
	"\bduration\x18\x9b\x01 \x01(\x03H@R\bduration\x88\x01\x01\x12)\n" +
	"\regress_region\x18\x9c\x01 \x01(\tHAR\fegressRegion\x88\x01\x01\x12@\n" +
	"\x19established_tunnels_count\x18\x9d\x01 \x01(\x03HBR\x17establishedTunnelsCount\x88\x01\x01\x12;\n" +
	"\x16establishment_duration\x18\x9e\x01 \x01(\x03HCR\x15establishmentDuration\x88\x01\x01\x126\n" +
	"\x14fronting_provider_id\x18\x9f\x01 \x01(\tHDR\x12frontingProviderId\x88\x01\x01\x125\n" +
	"\x13handshake_completed\x18\xa0\x01 \x01(\bHER\x12handshakeCompleted\x88\x01\x01\x12+\n" +
	"\x0ehttp_transform\x18\xa1\x01 \x01(\tHFR\rhttpTransform\x88\x01\x01\x12@\n" +
	"\x1ais_first_tunnel_in_session\x18\xa2\x01 \x01(\bHGR\x16isFirstTunnelInSession\x88\x01\x01\x12!\n" +
	"\tis_replay\x18\xa3\x01 \x01(\bHHR\bisReplay\x88\x01\x01\x12G\n" +
	"\x0elast_connected\x18\xa4\x01 \x01(\v2\x1a.google.protobuf.TimestampHIR\rlastConnected\x88\x01\x01\x12B\n" +
	"\x1anetwork_latency_multiplier\x18\xa5\x01 \x01(\x01HJR\x18networkLatencyMultiplier\x88\x01\x01\x12'\n" +
	"\fnetwork_type\x18\xa6\x01 \x01(\tHKR\vnetworkType\x88\x01\x01\x12,\n" +
	"\x0fnew_tactics_tag\x18\xa7\x01 \x01(\tHLR\rnewTacticsTag\x88\x01\x01\x12%\n" +
	"\vossh_prefix\x18\xa8\x01 \x01(\tHMR\n" +
	"osshPrefix\x88\x01\x01\x12'\n" +
	"\fpad_response\x18\xa9\x01 \x01(\x03HNR\vpadResponse\x88\x01\x01\x12\x1e\n" +
	"\apadding\x18\xaa\x01 \x01(\x03HOR\apadding\x88\x01\x01\x125\n" +
	"\x13passthrough_address\x18\xab\x01 \x01(\tHPR\x12passthroughAddress\x88\x01\x01\x12f\n" +
	".peak_concurrent_dialing_port_forward_count_tcp\x18\xac\x01 \x01(\x03HQR(peakConcurrentDialingPortForwardCountTcp\x88\x01\x01\x12W\n" +
	"&peak_concurrent_port_forward_count_tcp\x18\xad\x01 \x01(\x03HRR!peakConcurrentPortForwardCountTcp\x88\x01\x01\x12W\n" +
	"&peak_concurrent_port_forward_count_udp\x18\xae\x01 \x01(\x03HSR!peakConcurrentPortForwardCountUdp\x88\x01\x01\x12`\n" +
	"*peak_concurrent_proximate_accepted_clients\x18\xaf\x01 \x01(\x03HTR&peakConcurrentProximateAcceptedClients\x88\x01\x01\x12f\n" +
	"-peak_concurrent_proximate_established_clients\x18\xb0\x01 \x01(\x03HUR)peakConcurrentProximateEstablishedClients\x88\x01\x01\x127\n" +
	"\x15peak_dns_failure_rate\x18\xb1\x01 \x01(\x01HVR\x12peakDnsFailureRate\x88\x01\x01\x12M\n" +
	"!peak_dns_failure_rate_sample_size\x18\xb2\x01 \x01(\x03HWR\x1cpeakDnsFailureRateSampleSize\x88\x01\x01\x12O\n" +
	"\"peak_tcp_port_forward_failure_rate\x18\xb3\x01 \x01(\x01HXR\x1dpeakTcpPortForwardFailureRate\x88\x01\x01\x12e\n" +
	".peak_tcp_port_forward_failure_rate_sample_size\x18\xb4\x01 \x01(\x03HYR'peakTcpPortForwardFailureRateSampleSize\x88\x01\x01\x12N\n" +
	"!pre_handshake_random_stream_count\x18\xb5\x01 \x01(\x03HZR\x1dpreHandshakeRandomStreamCount\x88\x01\x01\x12c\n" +
	",pre_handshake_random_stream_downstream_bytes\x18\xb6\x01 \x01(\x03H[R'preHandshakeRandomStreamDownstreamBytes\x88\x01\x01\x12p\n" +
	"3pre_handshake_random_stream_received_upstream_bytes\x18\xb7\x01 \x01(\x03H\\R-preHandshakeRandomStreamReceivedUpstreamBytes\x88\x01\x01\x12l\n" +
	"1pre_handshake_random_stream_sent_downstream_bytes\x18\xb8\x01 \x01(\x03H]R+preHandshakeRandomStreamSentDownstreamBytes\x88\x01\x01\x12_\n" +
	"*pre_handshake_random_stream_upstream_bytes\x18\xb9\x01 \x01(\x03H^R%preHandshakeRandomStreamUpstreamBytes\x88\x01\x01\x12+\n" +
	"\x0erelay_protocol\x18\xba\x01 \x01(\tH_R\rrelayProtocol\x88\x01\x01\x12+\n" +
	"\x0eseed_transform\x18\xbb\x01 \x01(\tH`R\rseedTransform\x88\x01\x01\x12#\n" +
	"\n" +
	"server_bpf\x18\xbc\x01 \x01(\tHaR\tserverBpf\x88\x01\x01\x12'\n" +
	"\fsplit_tunnel\x18\xbd\x01 \x01(\bHbR\vsplitTunnel\x88\x01\x01\x122\n" +
	"\x12ssh_client_version\x18\xbe\x01 \x01(\tHcR\x10sshClientVersion\x88\x01\x01\x12?\n" +
	"\n" +
	"start_time\x18\xbf\x01 \x01(\v2\x1a.google.protobuf.TimestampHdR\tstartTime\x88\x01\x01\x122\n" +
	"\x12station_ip_address\x18\xc0\x01 \x01(\tHeR\x10stationIpAddress\x88\x01\x01\x12N\n" +
	"!total_packet_tunnel_channel_count\x18\xc1\x01 \x01(\x03HfR\x1dtotalPacketTunnelChannelCount\x88\x01\x01\x12D\n" +
	"\x1ctotal_port_forward_count_tcp\x18\xc2\x01 \x01(\x03HgR\x18totalPortForwardCountTcp\x88\x01\x01\x12D\n" +
	"\x1ctotal_port_forward_count_udp\x18\xc3\x01 \x01(\x03HhR\x18totalPortForwardCountUdp\x88\x01\x01\x12?\n" +
	"\x19total_udpgw_channel_count\x18\xc4\x01 \x01(\x03HiR\x16totalUdpgwChannelCount\x88\x01\x01\x12@\n" +
	"\x19upstream_bytes_fragmented\x18\xc5\x01 \x01(\x03HjR\x17upstreamBytesFragmented\x88\x01\x01\x12A\n" +
	"\x1aupstream_max_bytes_written\x18\xc6\x01 \x01(\x03HkR\x17upstreamMaxBytesWritten\x88\x01\x01\x126\n" +
	"\x14upstream_max_delayed\x18\xc7\x01 \x01(\x03HlR\x12upstreamMaxDelayed\x88\x01\x01\x12A\n" +
	"\x1aupstream_min_bytes_written\x18\xc8\x01 \x01(\x03HmR\x17upstreamMinBytesWritten\x88\x01\x01\x126\n" +
	"\x14upstream_min_delayed\x18\xc9\x01 \x01(\x03HnR\x12upstreamMinDelayed\x88\x01\x01\x128\n" +
	"\x15upstream_ossh_padding\x18\xca\x01 \x01(\x03HoR\x13upstreamOsshPadding\x88\x01\x01\x12P\n" +
	"\"upstream_proxy_custom_header_names\x18\xcb\x01 \x01(\tHpR\x1eupstreamProxyCustomHeaderNames\x88\x01\x01\x124\n" +
	"\x13upstream_proxy_type\x18\xcc\x01 \x01(\tHqR\x11upstreamProxyType\x88\x01\x01\x12#\n" +
	"\n" +
	"user_agent\x18\xcd\x01 \x01(\tHrR\tuserAgent\x88\x01\x01\x123\n" +
	"\x13random_stream_count\x18\x1a \x01(\x03HsR\x11randomStreamCount\x88\x01\x01\x12E\n" +
	"\x1crandom_stream_upstream_bytes\x18\xcf\x01 \x01(\x03HtR\x19randomStreamUpstreamBytes\x88\x01\x01\x12V\n" +
	"%random_stream_received_upstream_bytes\x18\xd0\x01 \x01(\x03HuR!randomStreamReceivedUpstreamBytes\x88\x01\x01\x12I\n" +
	"\x1erandom_stream_downstream_bytes\x18\xd1\x01 \x01(\x03HvR\x1brandomStreamDownstreamBytes\x88\x01\x01\x12R\n" +
	"#random_stream_sent_downstream_bytes\x18\xd2\x01 \x01(\x03HwR\x1frandomStreamSentDownstreamBytes\x88\x01\x01\x12*\n" +
	"\x0edest_bytes_asn\x18\xd3\x01 \x01(\tHxR\fdestBytesAsn\x88\x01\x01\x12#\n" +
	"\n" +
	"dest_bytes\x18\xd4\x01 \x01(\x03HyR\tdestBytes\x88\x01\x01\x12/\n" +
	"\x11dest_bytes_up_tcp\x18\xd5\x01 \x01(\x03HzR\x0edestBytesUpTcp\x88\x01\x01\x123\n" +
	"\x13dest_bytes_down_tcp\x18\xd6\x01 \x01(\x03H{R\x10destBytesDownTcp\x88\x01\x01\x12/\n" +
	"\x11dest_bytes_up_udp\x18\xd7\x01 \x01(\x03H|R\x0edestBytesUpUdp\x88\x01\x01\x123\n" +
	"\x13dest_bytes_down_udp\x18\xd8\x01 \x01(\x03H}R\x10destBytesDownUdp\x88\x01\x01\x124\n" +
	"\x13relayed_steering_ip\x18\xd9\x01 \x01(\tH~R\x11relayedSteeringIp\x88\x01\x01\x12J\n" +
	"\x1frequest_check_server_entry_tags\x18\xda\x01 \x01(\x03H\x7fR\x1brequestCheckServerEntryTags\x88\x01\x01\x12@\n" +
	"\x19checked_server_entry_tags\x18\xdb\x01 \x01(\x03H\x80\x01R\x16checkedServerEntryTags\x88\x01\x01\x12@\n" +
	"\x19invalid_server_entry_tags\x18\xdc\x01 \x01(\x03H\x81\x01R\x16invalidServerEntryTags\x88\x01\x01\x123\n" +
	"\x12ssh_protocol_bytes\x18\xdd\x01 \x01(\x03H\x82\x01R\x10sshProtocolBytes\x88\x01\x01\x12D\n" +
	"\x1bssh_protocol_bytes_overhead\x18\xde\x01 \x01(\x03H\x83\x01R\x18sshProtocolBytesOverhead\x88\x01\x01B\x12\n" +
	"\x10_metadata_clientB\x12\n" +
	"\x10_metadata_deviceB\x13\n" +
	"\x11_metadata_sessionB\x18\n" +
	"\x16_metadata_server_entryB\x13\n" +
	"\x11_metadata_conjureB\x13\n" +
	"\x11_metadata_inproxyB\x10\n" +
	"\x0e_metadata_meekB\x10\n" +
	"\x0e_metadata_quicB\x17\n" +
	"\x15_metadata_shadowsocksB\x0f\n" +
	"\r_metadata_tlsB\f\n" +
	"\n" +
	"_tunnel_idB\x16\n" +
	"\x14_applied_tactics_tagB\x1f\n" +
	"\x1d_burst_downstream_first_bytesB\"\n" +
	" _burst_downstream_first_durationB \n" +
	"\x1e_burst_downstream_first_offsetB\x1e\n" +
	"\x1c_burst_downstream_first_rateB\x1e\n" +
	"\x1c_burst_downstream_last_bytesB!\n" +
	"\x1f_burst_downstream_last_durationB\x1f\n" +
	"\x1d_burst_downstream_last_offsetB\x1d\n" +
	"\x1b_burst_downstream_last_rateB\x1d\n" +
	"\x1b_burst_downstream_max_bytesB \n" +
	"\x1e_burst_downstream_max_durationB\x1e\n" +
	"\x1c_burst_downstream_max_offsetB\x1c\n" +
	"\x1a_burst_downstream_max_rateB\x1d\n" +
	"\x1b_burst_downstream_min_bytesB \n" +
	"\x1e_burst_downstream_min_durationB\x1e\n" +
	"\x1c_burst_downstream_min_offsetB\x1c\n" +
	"\x1a_burst_downstream_min_rateB\x1d\n" +
	"\x1b_burst_upstream_first_bytesB \n" +
	"\x1e_burst_upstream_first_durationB\x1e\n" +
	"\x1c_burst_upstream_first_offsetB\x1c\n" +
	"\x1a_burst_upstream_first_rateB\x1c\n" +
	"\x1a_burst_upstream_last_bytesB\x1f\n" +
	"\x1d_burst_upstream_last_durationB\x1d\n" +
	"\x1b_burst_upstream_last_offsetB\x1b\n" +
	"\x19_burst_upstream_last_rateB\x1b\n" +
	"\x19_burst_upstream_max_bytesB\x1e\n" +
	"\x1c_burst_upstream_max_durationB\x1c\n" +
	"\x1a_burst_upstream_max_offsetB\x1a\n" +
	"\x18_burst_upstream_max_rateB\x1b\n" +
	"\x19_burst_upstream_min_bytesB\x1e\n" +
	"\x1c_burst_upstream_min_durationB\x1c\n" +
	"\x1a_burst_upstream_min_offsetB\x1a\n" +
	"\x18_burst_upstream_min_rateB\b\n" +
	"\x06_bytesB\x11\n" +
	"\x0f_bytes_down_tcpB\x11\n" +
	"\x0f_bytes_down_udpB\x0f\n" +
	"\r_bytes_up_tcpB\x0f\n" +
	"\r_bytes_up_udpB\x13\n" +
	"\x11_candidate_numberB\x10\n" +
	"\x0e_dial_durationB\x13\n" +
	"\x11_dial_port_numberB\x0e\n" +
	"\f_dns_attemptB\x10\n" +
	"\x0e_dns_preferredB\x12\n" +
	"\x10_dns_preresolvedB\x17\n" +
	"\x15_dns_qname_mismatchesB\x1a\n" +
	"\x18_dns_qname_random_casingB\x10\n" +
	"\x0e_dns_transformB\x1e\n" +
	"\x1c_downstream_bytes_fragmentedB\x1f\n" +
	"\x1d_downstream_max_bytes_writtenB\x19\n" +
	"\x17_downstream_max_delayedB\x1f\n" +
	"\x1d_downstream_min_bytes_writtenB\x19\n" +
	"\x17_downstream_min_delayedB\x1a\n" +
	"\x18_downstream_ossh_paddingB\v\n" +
	"\t_durationB\x10\n" +
	"\x0e_egress_regionB\x1c\n" +
	"\x1a_established_tunnels_countB\x19\n" +
	"\x17_establishment_durationB\x17\n" +
	"\x15_fronting_provider_idB\x16\n" +
	"\x14_handshake_completedB\x11\n" +
	"\x0f_http_transformB\x1d\n" +
	"\x1b_is_first_tunnel_in_sessionB\f\n" +
	"\n" +
	"_is_replayB\x11\n" +
	"\x0f_last_connectedB\x1d\n" +
	"\x1b_network_latency_multiplierB\x0f\n" +
	"\r_network_typeB\x12\n" +
	"\x10_new_tactics_tagB\x0e\n" +
	"\f_ossh_prefixB\x0f\n" +
	"\r_pad_responseB\n" +
	"\n" +
	"\b_paddingB\x16\n" +
	"\x14_passthrough_addressB1\n" +
	"/_peak_concurrent_dialing_port_forward_count_tcpB)\n" +
	"'_peak_concurrent_port_forward_count_tcpB)\n" +
	"'_peak_concurrent_port_forward_count_udpB-\n" +
	"+_peak_concurrent_proximate_accepted_clientsB0\n" +
	"._peak_concurrent_proximate_established_clientsB\x18\n" +
	"\x16_peak_dns_failure_rateB$\n" +
	"\"_peak_dns_failure_rate_sample_sizeB%\n" +
	"#_peak_tcp_port_forward_failure_rateB1\n" +
	"/_peak_tcp_port_forward_failure_rate_sample_sizeB$\n" +
	"\"_pre_handshake_random_stream_countB/\n" +
	"-_pre_handshake_random_stream_downstream_bytesB6\n" +
	"4_pre_handshake_random_stream_received_upstream_bytesB4\n" +
	"2_pre_handshake_random_stream_sent_downstream_bytesB-\n" +
	"+_pre_handshake_random_stream_upstream_bytesB\x11\n" +
	"\x0f_relay_protocolB\x11\n" +
	"\x0f_seed_transformB\r\n" +
	"\v_server_bpfB\x0f\n" +
	"\r_split_tunnelB\x15\n" +
	"\x13_ssh_client_versionB\r\n" +
	"\v_start_timeB\x15\n" +
	"\x13_station_ip_addressB$\n" +
	"\"_total_packet_tunnel_channel_countB\x1f\n" +
	"\x1d_total_port_forward_count_tcpB\x1f\n" +
	"\x1d_total_port_forward_count_udpB\x1c\n" +
	"\x1a_total_udpgw_channel_countB\x1c\n" +
	"\x1a_upstream_bytes_fragmentedB\x1d\n" +
	"\x1b_upstream_max_bytes_writtenB\x17\n" +
	"\x15_upstream_max_delayedB\x1d\n" +
	"\x1b_upstream_min_bytes_writtenB\x17\n" +
	"\x15_upstream_min_delayedB\x18\n" +
	"\x16_upstream_ossh_paddingB%\n" +
	"#_upstream_proxy_custom_header_namesB\x16\n" +
	"\x14_upstream_proxy_typeB\r\n" +
	"\v_user_agentB\x16\n" +
	"\x14_random_stream_countB\x1f\n" +
	"\x1d_random_stream_upstream_bytesB(\n" +
	"&_random_stream_received_upstream_bytesB!\n" +
	"\x1f_random_stream_downstream_bytesB&\n" +
	"$_random_stream_sent_downstream_bytesB\x11\n" +
	"\x0f_dest_bytes_asnB\r\n" +
	"\v_dest_bytesB\x14\n" +
	"\x12_dest_bytes_up_tcpB\x16\n" +
	"\x14_dest_bytes_down_tcpB\x14\n" +
	"\x12_dest_bytes_up_udpB\x16\n" +
	"\x14_dest_bytes_down_udpB\x16\n" +
	"\x14_relayed_steering_ipB\"\n" +
	" _request_check_server_entry_tagsB\x1c\n" +
	"\x1a_checked_server_entry_tagsB\x1c\n" +
	"\x1a_invalid_server_entry_tagsB\x15\n" +
	"\x13_ssh_protocol_bytesB\x1e\n" +
	"\x1c_ssh_protocol_bytes_overhead\"\xce\x03\n" +
	"\x18ServerTunnelASNDestBytes\x12 \n" +
	"\ttunnel_id\x18d \x01(\tH\x00R\btunnelId\x88\x01\x01\x12\x1e\n" +
	"\bdest_asn\x18e \x01(\tH\x01R\adestAsn\x88\x01\x01\x12\"\n" +
	"\n" +
	"dest_bytes\x18f \x01(\x03H\x02R\tdestBytes\x88\x01\x01\x12.\n" +
	"\x11dest_bytes_up_tcp\x18g \x01(\x03H\x03R\x0edestBytesUpTcp\x88\x01\x01\x122\n" +
	"\x13dest_bytes_down_tcp\x18h \x01(\x03H\x04R\x10destBytesDownTcp\x88\x01\x01\x12.\n" +
	"\x11dest_bytes_up_udp\x18i \x01(\x03H\x05R\x0edestBytesUpUdp\x88\x01\x01\x122\n" +
	"\x13dest_bytes_down_udp\x18j \x01(\x03H\x06R\x10destBytesDownUdp\x88\x01\x01B\f\n" +
	"\n" +
	"_tunnel_idB\v\n" +
	"\t_dest_asnB\r\n" +
	"\v_dest_bytesB\x14\n" +
	"\x12_dest_bytes_up_tcpB\x16\n" +
	"\x14_dest_bytes_down_tcpB\x14\n" +
	"\x12_dest_bytes_up_udpB\x16\n" +
	"\x14_dest_bytes_down_udpB?Z=github.com/Psiphon-Labs/psiphon-tunnel-core/psiphon/server/pbb\x06proto3"

var (
	file_proto_server_tunnel_proto_rawDescOnce sync.Once
	file_proto_server_tunnel_proto_rawDescData []byte
)

func file_proto_server_tunnel_proto_rawDescGZIP() []byte {
	file_proto_server_tunnel_proto_rawDescOnce.Do(func() {
		file_proto_server_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_server_tunnel_proto_rawDesc), len(file_proto_server_tunnel_proto_rawDesc)))
	})
	return file_proto_server_tunnel_proto_rawDescData
}

var file_proto_server_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_server_tunnel_proto_goTypes = []any{
	(*ServerTunnel)(nil),             // 0: psiphond.ServerTunnel
	(*ServerTunnelASNDestBytes)(nil), // 1: psiphond.ServerTunnelASNDestBytes
	(*MetadataClient)(nil),           // 2: psiphond.MetadataClient
	(*MetadataDevice)(nil),           // 3: psiphond.MetadataDevice
	(*MetadataSession)(nil),          // 4: psiphond.MetadataSession
	(*MetadataServerEntry)(nil),      // 5: psiphond.MetadataServerEntry
	(*MetadataConjure)(nil),          // 6: psiphond.MetadataConjure
	(*MetadataInproxy)(nil),          // 7: psiphond.MetadataInproxy
	(*MetadataMeek)(nil),             // 8: psiphond.MetadataMeek
	(*MetadataQuic)(nil),             // 9: psiphond.MetadataQuic
	(*MetadataShadowsocks)(nil),      // 10: psiphond.MetadataShadowsocks
	(*MetadataTLS)(nil),              // 11: psiphond.MetadataTLS
	(*timestamppb.Timestamp)(nil),    // 12: google.protobuf.Timestamp
}
var file_proto_server_tunnel_proto_depIdxs = []int32{
	2,  // 0: psiphond.ServerTunnel.metadata_client:type_name -> psiphond.MetadataClient
	3,  // 1: psiphond.ServerTunnel.metadata_device:type_name -> psiphond.MetadataDevice
	4,  // 2: psiphond.ServerTunnel.metadata_session:type_name -> psiphond.MetadataSession
	5,  // 3: psiphond.ServerTunnel.metadata_server_entry:type_name -> psiphond.MetadataServerEntry
	6,  // 4: psiphond.ServerTunnel.metadata_conjure:type_name -> psiphond.MetadataConjure
	7,  // 5: psiphond.ServerTunnel.metadata_inproxy:type_name -> psiphond.MetadataInproxy
	8,  // 6: psiphond.ServerTunnel.metadata_meek:type_name -> psiphond.MetadataMeek
	9,  // 7: psiphond.ServerTunnel.metadata_quic:type_name -> psiphond.MetadataQuic
	10, // 8: psiphond.ServerTunnel.metadata_shadowsocks:type_name -> psiphond.MetadataShadowsocks
	11, // 9: psiphond.ServerTunnel.metadata_tls:type_name -> psiphond.MetadataTLS
	12, // 10: psiphond.ServerTunnel.last_connected:type_name -> google.protobuf.Timestamp
	12, // 11: psiphond.ServerTunnel.start_time:type_name -> google.protobuf.Timestamp
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_proto_server_tunnel_proto_init() }
func file_proto_server_tunnel_proto_init() {
	if File_proto_server_tunnel_proto != nil {
		return
	}
	file_proto_metadata_proto_init()
	file_proto_server_tunnel_proto_msgTypes[0].OneofWrappers = []any{}
	file_proto_server_tunnel_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_server_tunnel_proto_rawDesc), len(file_proto_server_tunnel_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_server_tunnel_proto_goTypes,
		DependencyIndexes: file_proto_server_tunnel_proto_depIdxs,
		MessageInfos:      file_proto_server_tunnel_proto_msgTypes,
	}.Build()
	File_proto_server_tunnel_proto = out.File
	file_proto_server_tunnel_proto_goTypes = nil
	file_proto_server_tunnel_proto_depIdxs = nil
}
