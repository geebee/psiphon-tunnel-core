// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/failed_tunnel.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FailedTunnel struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	MetadataClient      *MetadataClient        `protobuf:"bytes,1,opt,name=metadata_client,json=metadataClient,proto3,oneof" json:"metadata_client,omitempty"`
	MetadataDevice      *MetadataDevice        `protobuf:"bytes,2,opt,name=metadata_device,json=metadataDevice,proto3,oneof" json:"metadata_device,omitempty"`
	MetadataSession     *MetadataSession       `protobuf:"bytes,3,opt,name=metadata_session,json=metadataSession,proto3,oneof" json:"metadata_session,omitempty"`
	MetadataServerEntry *MetadataServerEntry   `protobuf:"bytes,4,opt,name=metadata_server_entry,json=metadataServerEntry,proto3,oneof" json:"metadata_server_entry,omitempty"`
	// Protocol Metadata
	MetadataConjure                     *MetadataConjure       `protobuf:"bytes,5,opt,name=metadata_conjure,json=metadataConjure,proto3,oneof" json:"metadata_conjure,omitempty"`
	MetadataInproxy                     *MetadataInproxy       `protobuf:"bytes,6,opt,name=metadata_inproxy,json=metadataInproxy,proto3,oneof" json:"metadata_inproxy,omitempty"`
	MetadataMeek                        *MetadataMeek          `protobuf:"bytes,7,opt,name=metadata_meek,json=metadataMeek,proto3,oneof" json:"metadata_meek,omitempty"`
	MetadataQuic                        *MetadataQuic          `protobuf:"bytes,8,opt,name=metadata_quic,json=metadataQuic,proto3,oneof" json:"metadata_quic,omitempty"`
	MetadataShadowsocks                 *MetadataShadowsocks   `protobuf:"bytes,9,opt,name=metadata_shadowsocks,json=metadataShadowsocks,proto3,oneof" json:"metadata_shadowsocks,omitempty"`
	MetadataTls                         *MetadataTLS           `protobuf:"bytes,10,opt,name=metadata_tls,json=metadataTls,proto3,oneof" json:"metadata_tls,omitempty"`
	CandidateNumber                     *int32                 `protobuf:"varint,100,opt,name=candidate_number,json=candidateNumber,proto3,oneof" json:"candidate_number,omitempty"`
	TunnelId                            *string                `protobuf:"bytes,101,opt,name=tunnel_id,json=tunnelId,proto3,oneof" json:"tunnel_id,omitempty"`
	AuthorizedAccessTypes               []string               `protobuf:"bytes,102,rep,name=authorized_access_types,json=authorizedAccessTypes,proto3" json:"authorized_access_types,omitempty"` //LowCardinality
	AppliedTacticsTag                   *string                `protobuf:"bytes,103,opt,name=applied_tactics_tag,json=appliedTacticsTag,proto3,oneof" json:"applied_tactics_tag,omitempty"`       //LowCardinality
	BytesDown                           *int64                 `protobuf:"varint,104,opt,name=bytes_down,json=bytesDown,proto3,oneof" json:"bytes_down,omitempty"`
	BytesUp                             *int64                 `protobuf:"varint,105,opt,name=bytes_up,json=bytesUp,proto3,oneof" json:"bytes_up,omitempty"`
	ClientFailedTimestamp               *timestamppb.Timestamp `protobuf:"bytes,106,opt,name=client_failed_timestamp,json=clientFailedTimestamp,proto3,oneof" json:"client_failed_timestamp,omitempty"`
	DialDuration                        *int64                 `protobuf:"varint,107,opt,name=dial_duration,json=dialDuration,proto3,oneof" json:"dial_duration,omitempty"`
	DialPortNumber                      *int64                 `protobuf:"varint,108,opt,name=dial_port_number,json=dialPortNumber,proto3,oneof" json:"dial_port_number,omitempty"`
	EgressRegion                        *string                `protobuf:"bytes,109,opt,name=egress_region,json=egressRegion,proto3,oneof" json:"egress_region,omitempty"` //LowCardinality
	EstablishedTunnelsCount             *int64                 `protobuf:"varint,110,opt,name=established_tunnels_count,json=establishedTunnelsCount,proto3,oneof" json:"established_tunnels_count,omitempty"`
	FrontingProviderId                  *string                `protobuf:"bytes,111,opt,name=fronting_provider_id,json=frontingProviderId,proto3,oneof" json:"fronting_provider_id,omitempty"` //LowCardinality
	IsReplay                            *bool                  `protobuf:"varint,112,opt,name=is_replay,json=isReplay,proto3,oneof" json:"is_replay,omitempty"`
	LastConnected                       *timestamppb.Timestamp `protobuf:"bytes,113,opt,name=last_connected,json=lastConnected,proto3,oneof" json:"last_connected,omitempty"`
	LivenessTestDownstreamBytes         *int64                 `protobuf:"varint,114,opt,name=liveness_test_downstream_bytes,json=livenessTestDownstreamBytes,proto3,oneof" json:"liveness_test_downstream_bytes,omitempty"`
	LivenessTestReceivedDownstreamBytes *int64                 `protobuf:"varint,115,opt,name=liveness_test_received_downstream_bytes,json=livenessTestReceivedDownstreamBytes,proto3,oneof" json:"liveness_test_received_downstream_bytes,omitempty"`
	LivenessTestSentUpstreamBytes       *int64                 `protobuf:"varint,116,opt,name=liveness_test_sent_upstream_bytes,json=livenessTestSentUpstreamBytes,proto3,oneof" json:"liveness_test_sent_upstream_bytes,omitempty"`
	LivenessTestUpstreamBytes           *int64                 `protobuf:"varint,117,opt,name=liveness_test_upstream_bytes,json=livenessTestUpstreamBytes,proto3,oneof" json:"liveness_test_upstream_bytes,omitempty"`
	NetworkLatencyMultiplier            *float64               `protobuf:"fixed64,118,opt,name=network_latency_multiplier,json=networkLatencyMultiplier,proto3,oneof" json:"network_latency_multiplier,omitempty"`
	NetworkType                         *string                `protobuf:"bytes,119,opt,name=network_type,json=networkType,proto3,oneof" json:"network_type,omitempty"` //LowCardinality
	RecordProbability                   *float64               `protobuf:"fixed64,120,opt,name=record_probability,json=recordProbability,proto3,oneof" json:"record_probability,omitempty"`
	RelayProtocol                       *string                `protobuf:"bytes,121,opt,name=relay_protocol,json=relayProtocol,proto3,oneof" json:"relay_protocol,omitempty"`            //LowCardinality
	SshClientVersion                    *string                `protobuf:"bytes,122,opt,name=ssh_client_version,json=sshClientVersion,proto3,oneof" json:"ssh_client_version,omitempty"` //LowCardinality
	TunnelError                         *string                `protobuf:"bytes,123,opt,name=tunnel_error,json=tunnelError,proto3,oneof" json:"tunnel_error,omitempty"`                  //LowCardinality
	UpstreamBytesFragmented             *int64                 `protobuf:"varint,124,opt,name=upstream_bytes_fragmented,json=upstreamBytesFragmented,proto3,oneof" json:"upstream_bytes_fragmented,omitempty"`
	UpstreamMaxBytesWritten             *int64                 `protobuf:"varint,125,opt,name=upstream_max_bytes_written,json=upstreamMaxBytesWritten,proto3,oneof" json:"upstream_max_bytes_written,omitempty"`
	UpstreamMaxDelayed                  *int64                 `protobuf:"varint,126,opt,name=upstream_max_delayed,json=upstreamMaxDelayed,proto3,oneof" json:"upstream_max_delayed,omitempty"`
	UpstreamMinBytesWritten             *int64                 `protobuf:"varint,127,opt,name=upstream_min_bytes_written,json=upstreamMinBytesWritten,proto3,oneof" json:"upstream_min_bytes_written,omitempty"`
	UpstreamMinDelayed                  *int64                 `protobuf:"varint,128,opt,name=upstream_min_delayed,json=upstreamMinDelayed,proto3,oneof" json:"upstream_min_delayed,omitempty"`
	UpstreamOsshPadding                 *int64                 `protobuf:"varint,129,opt,name=upstream_ossh_padding,json=upstreamOsshPadding,proto3,oneof" json:"upstream_ossh_padding,omitempty"`
	UpstreamProxyCustomHeaderNames      *string                `protobuf:"bytes,130,opt,name=upstream_proxy_custom_header_names,json=upstreamProxyCustomHeaderNames,proto3,oneof" json:"upstream_proxy_custom_header_names,omitempty"` //LowCardinality
	UpstreamProxyType                   *string                `protobuf:"bytes,131,opt,name=upstream_proxy_type,json=upstreamProxyType,proto3,oneof" json:"upstream_proxy_type,omitempty"`                                            //LowCardinality
	UserAgent                           *string                `protobuf:"bytes,132,opt,name=user_agent,json=userAgent,proto3,oneof" json:"user_agent,omitempty"`
	unknownFields                       protoimpl.UnknownFields
	sizeCache                           protoimpl.SizeCache
}

func (x *FailedTunnel) Reset() {
	*x = FailedTunnel{}
	mi := &file_proto_failed_tunnel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FailedTunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailedTunnel) ProtoMessage() {}

func (x *FailedTunnel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_failed_tunnel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailedTunnel.ProtoReflect.Descriptor instead.
func (*FailedTunnel) Descriptor() ([]byte, []int) {
	return file_proto_failed_tunnel_proto_rawDescGZIP(), []int{0}
}

func (x *FailedTunnel) GetMetadataClient() *MetadataClient {
	if x != nil {
		return x.MetadataClient
	}
	return nil
}

func (x *FailedTunnel) GetMetadataDevice() *MetadataDevice {
	if x != nil {
		return x.MetadataDevice
	}
	return nil
}

func (x *FailedTunnel) GetMetadataSession() *MetadataSession {
	if x != nil {
		return x.MetadataSession
	}
	return nil
}

func (x *FailedTunnel) GetMetadataServerEntry() *MetadataServerEntry {
	if x != nil {
		return x.MetadataServerEntry
	}
	return nil
}

func (x *FailedTunnel) GetMetadataConjure() *MetadataConjure {
	if x != nil {
		return x.MetadataConjure
	}
	return nil
}

func (x *FailedTunnel) GetMetadataInproxy() *MetadataInproxy {
	if x != nil {
		return x.MetadataInproxy
	}
	return nil
}

func (x *FailedTunnel) GetMetadataMeek() *MetadataMeek {
	if x != nil {
		return x.MetadataMeek
	}
	return nil
}

func (x *FailedTunnel) GetMetadataQuic() *MetadataQuic {
	if x != nil {
		return x.MetadataQuic
	}
	return nil
}

func (x *FailedTunnel) GetMetadataShadowsocks() *MetadataShadowsocks {
	if x != nil {
		return x.MetadataShadowsocks
	}
	return nil
}

func (x *FailedTunnel) GetMetadataTls() *MetadataTLS {
	if x != nil {
		return x.MetadataTls
	}
	return nil
}

func (x *FailedTunnel) GetCandidateNumber() int32 {
	if x != nil && x.CandidateNumber != nil {
		return *x.CandidateNumber
	}
	return 0
}

func (x *FailedTunnel) GetTunnelId() string {
	if x != nil && x.TunnelId != nil {
		return *x.TunnelId
	}
	return ""
}

func (x *FailedTunnel) GetAuthorizedAccessTypes() []string {
	if x != nil {
		return x.AuthorizedAccessTypes
	}
	return nil
}

func (x *FailedTunnel) GetAppliedTacticsTag() string {
	if x != nil && x.AppliedTacticsTag != nil {
		return *x.AppliedTacticsTag
	}
	return ""
}

func (x *FailedTunnel) GetBytesDown() int64 {
	if x != nil && x.BytesDown != nil {
		return *x.BytesDown
	}
	return 0
}

func (x *FailedTunnel) GetBytesUp() int64 {
	if x != nil && x.BytesUp != nil {
		return *x.BytesUp
	}
	return 0
}

func (x *FailedTunnel) GetClientFailedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ClientFailedTimestamp
	}
	return nil
}

func (x *FailedTunnel) GetDialDuration() int64 {
	if x != nil && x.DialDuration != nil {
		return *x.DialDuration
	}
	return 0
}

func (x *FailedTunnel) GetDialPortNumber() int64 {
	if x != nil && x.DialPortNumber != nil {
		return *x.DialPortNumber
	}
	return 0
}

func (x *FailedTunnel) GetEgressRegion() string {
	if x != nil && x.EgressRegion != nil {
		return *x.EgressRegion
	}
	return ""
}

func (x *FailedTunnel) GetEstablishedTunnelsCount() int64 {
	if x != nil && x.EstablishedTunnelsCount != nil {
		return *x.EstablishedTunnelsCount
	}
	return 0
}

func (x *FailedTunnel) GetFrontingProviderId() string {
	if x != nil && x.FrontingProviderId != nil {
		return *x.FrontingProviderId
	}
	return ""
}

func (x *FailedTunnel) GetIsReplay() bool {
	if x != nil && x.IsReplay != nil {
		return *x.IsReplay
	}
	return false
}

func (x *FailedTunnel) GetLastConnected() *timestamppb.Timestamp {
	if x != nil {
		return x.LastConnected
	}
	return nil
}

func (x *FailedTunnel) GetLivenessTestDownstreamBytes() int64 {
	if x != nil && x.LivenessTestDownstreamBytes != nil {
		return *x.LivenessTestDownstreamBytes
	}
	return 0
}

func (x *FailedTunnel) GetLivenessTestReceivedDownstreamBytes() int64 {
	if x != nil && x.LivenessTestReceivedDownstreamBytes != nil {
		return *x.LivenessTestReceivedDownstreamBytes
	}
	return 0
}

func (x *FailedTunnel) GetLivenessTestSentUpstreamBytes() int64 {
	if x != nil && x.LivenessTestSentUpstreamBytes != nil {
		return *x.LivenessTestSentUpstreamBytes
	}
	return 0
}

func (x *FailedTunnel) GetLivenessTestUpstreamBytes() int64 {
	if x != nil && x.LivenessTestUpstreamBytes != nil {
		return *x.LivenessTestUpstreamBytes
	}
	return 0
}

func (x *FailedTunnel) GetNetworkLatencyMultiplier() float64 {
	if x != nil && x.NetworkLatencyMultiplier != nil {
		return *x.NetworkLatencyMultiplier
	}
	return 0
}

func (x *FailedTunnel) GetNetworkType() string {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return ""
}

func (x *FailedTunnel) GetRecordProbability() float64 {
	if x != nil && x.RecordProbability != nil {
		return *x.RecordProbability
	}
	return 0
}

func (x *FailedTunnel) GetRelayProtocol() string {
	if x != nil && x.RelayProtocol != nil {
		return *x.RelayProtocol
	}
	return ""
}

func (x *FailedTunnel) GetSshClientVersion() string {
	if x != nil && x.SshClientVersion != nil {
		return *x.SshClientVersion
	}
	return ""
}

func (x *FailedTunnel) GetTunnelError() string {
	if x != nil && x.TunnelError != nil {
		return *x.TunnelError
	}
	return ""
}

func (x *FailedTunnel) GetUpstreamBytesFragmented() int64 {
	if x != nil && x.UpstreamBytesFragmented != nil {
		return *x.UpstreamBytesFragmented
	}
	return 0
}

func (x *FailedTunnel) GetUpstreamMaxBytesWritten() int64 {
	if x != nil && x.UpstreamMaxBytesWritten != nil {
		return *x.UpstreamMaxBytesWritten
	}
	return 0
}

func (x *FailedTunnel) GetUpstreamMaxDelayed() int64 {
	if x != nil && x.UpstreamMaxDelayed != nil {
		return *x.UpstreamMaxDelayed
	}
	return 0
}

func (x *FailedTunnel) GetUpstreamMinBytesWritten() int64 {
	if x != nil && x.UpstreamMinBytesWritten != nil {
		return *x.UpstreamMinBytesWritten
	}
	return 0
}

func (x *FailedTunnel) GetUpstreamMinDelayed() int64 {
	if x != nil && x.UpstreamMinDelayed != nil {
		return *x.UpstreamMinDelayed
	}
	return 0
}

func (x *FailedTunnel) GetUpstreamOsshPadding() int64 {
	if x != nil && x.UpstreamOsshPadding != nil {
		return *x.UpstreamOsshPadding
	}
	return 0
}

func (x *FailedTunnel) GetUpstreamProxyCustomHeaderNames() string {
	if x != nil && x.UpstreamProxyCustomHeaderNames != nil {
		return *x.UpstreamProxyCustomHeaderNames
	}
	return ""
}

func (x *FailedTunnel) GetUpstreamProxyType() string {
	if x != nil && x.UpstreamProxyType != nil {
		return *x.UpstreamProxyType
	}
	return ""
}

func (x *FailedTunnel) GetUserAgent() string {
	if x != nil && x.UserAgent != nil {
		return *x.UserAgent
	}
	return ""
}

var File_proto_failed_tunnel_proto protoreflect.FileDescriptor

const file_proto_failed_tunnel_proto_rawDesc = "" +
	"\n" +
	"\x19proto/failed_tunnel.proto\x12\bpsiphond\x1a\x14proto/metadata.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x8e\x1c\n" +
	"\fFailedTunnel\x12F\n" +
	"\x0fmetadata_client\x18\x01 \x01(\v2\x18.psiphond.MetadataClientH\x00R\x0emetadataClient\x88\x01\x01\x12F\n" +
	"\x0fmetadata_device\x18\x02 \x01(\v2\x18.psiphond.MetadataDeviceH\x01R\x0emetadataDevice\x88\x01\x01\x12I\n" +
	"\x10metadata_session\x18\x03 \x01(\v2\x19.psiphond.MetadataSessionH\x02R\x0fmetadataSession\x88\x01\x01\x12V\n" +
	"\x15metadata_server_entry\x18\x04 \x01(\v2\x1d.psiphond.MetadataServerEntryH\x03R\x13metadataServerEntry\x88\x01\x01\x12I\n" +
	"\x10metadata_conjure\x18\x05 \x01(\v2\x19.psiphond.MetadataConjureH\x04R\x0fmetadataConjure\x88\x01\x01\x12I\n" +
	"\x10metadata_inproxy\x18\x06 \x01(\v2\x19.psiphond.MetadataInproxyH\x05R\x0fmetadataInproxy\x88\x01\x01\x12@\n" +
	"\rmetadata_meek\x18\a \x01(\v2\x16.psiphond.MetadataMeekH\x06R\fmetadataMeek\x88\x01\x01\x12@\n" +
	"\rmetadata_quic\x18\b \x01(\v2\x16.psiphond.MetadataQuicH\aR\fmetadataQuic\x88\x01\x01\x12U\n" +
	"\x14metadata_shadowsocks\x18\t \x01(\v2\x1d.psiphond.MetadataShadowsocksH\bR\x13metadataShadowsocks\x88\x01\x01\x12=\n" +
	"\fmetadata_tls\x18\n" +
	" \x01(\v2\x15.psiphond.MetadataTLSH\tR\vmetadataTls\x88\x01\x01\x12.\n" +
	"\x10candidate_number\x18d \x01(\x05H\n" +
	"R\x0fcandidateNumber\x88\x01\x01\x12 \n" +
	"\ttunnel_id\x18e \x01(\tH\vR\btunnelId\x88\x01\x01\x126\n" +
	"\x17authorized_access_types\x18f \x03(\tR\x15authorizedAccessTypes\x123\n" +
	"\x13applied_tactics_tag\x18g \x01(\tH\fR\x11appliedTacticsTag\x88\x01\x01\x12\"\n" +
	"\n" +
	"bytes_down\x18h \x01(\x03H\rR\tbytesDown\x88\x01\x01\x12\x1e\n" +
	"\bbytes_up\x18i \x01(\x03H\x0eR\abytesUp\x88\x01\x01\x12W\n" +
	"\x17client_failed_timestamp\x18j \x01(\v2\x1a.google.protobuf.TimestampH\x0fR\x15clientFailedTimestamp\x88\x01\x01\x12(\n" +
	"\rdial_duration\x18k \x01(\x03H\x10R\fdialDuration\x88\x01\x01\x12-\n" +
	"\x10dial_port_number\x18l \x01(\x03H\x11R\x0edialPortNumber\x88\x01\x01\x12(\n" +
	"\regress_region\x18m \x01(\tH\x12R\fegressRegion\x88\x01\x01\x12?\n" +
	"\x19established_tunnels_count\x18n \x01(\x03H\x13R\x17establishedTunnelsCount\x88\x01\x01\x125\n" +
	"\x14fronting_provider_id\x18o \x01(\tH\x14R\x12frontingProviderId\x88\x01\x01\x12 \n" +
	"\tis_replay\x18p \x01(\bH\x15R\bisReplay\x88\x01\x01\x12F\n" +
	"\x0elast_connected\x18q \x01(\v2\x1a.google.protobuf.TimestampH\x16R\rlastConnected\x88\x01\x01\x12H\n" +
	"\x1eliveness_test_downstream_bytes\x18r \x01(\x03H\x17R\x1blivenessTestDownstreamBytes\x88\x01\x01\x12Y\n" +
	"'liveness_test_received_downstream_bytes\x18s \x01(\x03H\x18R#livenessTestReceivedDownstreamBytes\x88\x01\x01\x12M\n" +
	"!liveness_test_sent_upstream_bytes\x18t \x01(\x03H\x19R\x1dlivenessTestSentUpstreamBytes\x88\x01\x01\x12D\n" +
	"\x1cliveness_test_upstream_bytes\x18u \x01(\x03H\x1aR\x19livenessTestUpstreamBytes\x88\x01\x01\x12A\n" +
	"\x1anetwork_latency_multiplier\x18v \x01(\x01H\x1bR\x18networkLatencyMultiplier\x88\x01\x01\x12&\n" +
	"\fnetwork_type\x18w \x01(\tH\x1cR\vnetworkType\x88\x01\x01\x122\n" +
	"\x12record_probability\x18x \x01(\x01H\x1dR\x11recordProbability\x88\x01\x01\x12*\n" +
	"\x0erelay_protocol\x18y \x01(\tH\x1eR\rrelayProtocol\x88\x01\x01\x121\n" +
	"\x12ssh_client_version\x18z \x01(\tH\x1fR\x10sshClientVersion\x88\x01\x01\x12&\n" +
	"\ftunnel_error\x18{ \x01(\tH R\vtunnelError\x88\x01\x01\x12?\n" +
	"\x19upstream_bytes_fragmented\x18| \x01(\x03H!R\x17upstreamBytesFragmented\x88\x01\x01\x12@\n" +
	"\x1aupstream_max_bytes_written\x18} \x01(\x03H\"R\x17upstreamMaxBytesWritten\x88\x01\x01\x125\n" +
	"\x14upstream_max_delayed\x18~ \x01(\x03H#R\x12upstreamMaxDelayed\x88\x01\x01\x12@\n" +
	"\x1aupstream_min_bytes_written\x18\x7f \x01(\x03H$R\x17upstreamMinBytesWritten\x88\x01\x01\x126\n" +
	"\x14upstream_min_delayed\x18\x80\x01 \x01(\x03H%R\x12upstreamMinDelayed\x88\x01\x01\x128\n" +
	"\x15upstream_ossh_padding\x18\x81\x01 \x01(\x03H&R\x13upstreamOsshPadding\x88\x01\x01\x12P\n" +
	"\"upstream_proxy_custom_header_names\x18\x82\x01 \x01(\tH'R\x1eupstreamProxyCustomHeaderNames\x88\x01\x01\x124\n" +
	"\x13upstream_proxy_type\x18\x83\x01 \x01(\tH(R\x11upstreamProxyType\x88\x01\x01\x12#\n" +
	"\n" +
	"user_agent\x18\x84\x01 \x01(\tH)R\tuserAgent\x88\x01\x01B\x12\n" +
	"\x10_metadata_clientB\x12\n" +
	"\x10_metadata_deviceB\x13\n" +
	"\x11_metadata_sessionB\x18\n" +
	"\x16_metadata_server_entryB\x13\n" +
	"\x11_metadata_conjureB\x13\n" +
	"\x11_metadata_inproxyB\x10\n" +
	"\x0e_metadata_meekB\x10\n" +
	"\x0e_metadata_quicB\x17\n" +
	"\x15_metadata_shadowsocksB\x0f\n" +
	"\r_metadata_tlsB\x13\n" +
	"\x11_candidate_numberB\f\n" +
	"\n" +
	"_tunnel_idB\x16\n" +
	"\x14_applied_tactics_tagB\r\n" +
	"\v_bytes_downB\v\n" +
	"\t_bytes_upB\x1a\n" +
	"\x18_client_failed_timestampB\x10\n" +
	"\x0e_dial_durationB\x13\n" +
	"\x11_dial_port_numberB\x10\n" +
	"\x0e_egress_regionB\x1c\n" +
	"\x1a_established_tunnels_countB\x17\n" +
	"\x15_fronting_provider_idB\f\n" +
	"\n" +
	"_is_replayB\x11\n" +
	"\x0f_last_connectedB!\n" +
	"\x1f_liveness_test_downstream_bytesB*\n" +
	"(_liveness_test_received_downstream_bytesB$\n" +
	"\"_liveness_test_sent_upstream_bytesB\x1f\n" +
	"\x1d_liveness_test_upstream_bytesB\x1d\n" +
	"\x1b_network_latency_multiplierB\x0f\n" +
	"\r_network_typeB\x15\n" +
	"\x13_record_probabilityB\x11\n" +
	"\x0f_relay_protocolB\x15\n" +
	"\x13_ssh_client_versionB\x0f\n" +
	"\r_tunnel_errorB\x1c\n" +
	"\x1a_upstream_bytes_fragmentedB\x1d\n" +
	"\x1b_upstream_max_bytes_writtenB\x17\n" +
	"\x15_upstream_max_delayedB\x1d\n" +
	"\x1b_upstream_min_bytes_writtenB\x17\n" +
	"\x15_upstream_min_delayedB\x18\n" +
	"\x16_upstream_ossh_paddingB%\n" +
	"#_upstream_proxy_custom_header_namesB\x16\n" +
	"\x14_upstream_proxy_typeB\r\n" +
	"\v_user_agentB?Z=github.com/Psiphon-Labs/psiphon-tunnel-core/psiphon/server/pbb\x06proto3"

var (
	file_proto_failed_tunnel_proto_rawDescOnce sync.Once
	file_proto_failed_tunnel_proto_rawDescData []byte
)

func file_proto_failed_tunnel_proto_rawDescGZIP() []byte {
	file_proto_failed_tunnel_proto_rawDescOnce.Do(func() {
		file_proto_failed_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_failed_tunnel_proto_rawDesc), len(file_proto_failed_tunnel_proto_rawDesc)))
	})
	return file_proto_failed_tunnel_proto_rawDescData
}

var file_proto_failed_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_failed_tunnel_proto_goTypes = []any{
	(*FailedTunnel)(nil),          // 0: psiphond.FailedTunnel
	(*MetadataClient)(nil),        // 1: psiphond.MetadataClient
	(*MetadataDevice)(nil),        // 2: psiphond.MetadataDevice
	(*MetadataSession)(nil),       // 3: psiphond.MetadataSession
	(*MetadataServerEntry)(nil),   // 4: psiphond.MetadataServerEntry
	(*MetadataConjure)(nil),       // 5: psiphond.MetadataConjure
	(*MetadataInproxy)(nil),       // 6: psiphond.MetadataInproxy
	(*MetadataMeek)(nil),          // 7: psiphond.MetadataMeek
	(*MetadataQuic)(nil),          // 8: psiphond.MetadataQuic
	(*MetadataShadowsocks)(nil),   // 9: psiphond.MetadataShadowsocks
	(*MetadataTLS)(nil),           // 10: psiphond.MetadataTLS
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_proto_failed_tunnel_proto_depIdxs = []int32{
	1,  // 0: psiphond.FailedTunnel.metadata_client:type_name -> psiphond.MetadataClient
	2,  // 1: psiphond.FailedTunnel.metadata_device:type_name -> psiphond.MetadataDevice
	3,  // 2: psiphond.FailedTunnel.metadata_session:type_name -> psiphond.MetadataSession
	4,  // 3: psiphond.FailedTunnel.metadata_server_entry:type_name -> psiphond.MetadataServerEntry
	5,  // 4: psiphond.FailedTunnel.metadata_conjure:type_name -> psiphond.MetadataConjure
	6,  // 5: psiphond.FailedTunnel.metadata_inproxy:type_name -> psiphond.MetadataInproxy
	7,  // 6: psiphond.FailedTunnel.metadata_meek:type_name -> psiphond.MetadataMeek
	8,  // 7: psiphond.FailedTunnel.metadata_quic:type_name -> psiphond.MetadataQuic
	9,  // 8: psiphond.FailedTunnel.metadata_shadowsocks:type_name -> psiphond.MetadataShadowsocks
	10, // 9: psiphond.FailedTunnel.metadata_tls:type_name -> psiphond.MetadataTLS
	11, // 10: psiphond.FailedTunnel.client_failed_timestamp:type_name -> google.protobuf.Timestamp
	11, // 11: psiphond.FailedTunnel.last_connected:type_name -> google.protobuf.Timestamp
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_proto_failed_tunnel_proto_init() }
func file_proto_failed_tunnel_proto_init() {
	if File_proto_failed_tunnel_proto != nil {
		return
	}
	file_proto_metadata_proto_init()
	file_proto_failed_tunnel_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_failed_tunnel_proto_rawDesc), len(file_proto_failed_tunnel_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_failed_tunnel_proto_goTypes,
		DependencyIndexes: file_proto_failed_tunnel_proto_depIdxs,
		MessageInfos:      file_proto_failed_tunnel_proto_msgTypes,
	}.Build()
	File_proto_failed_tunnel_proto = out.File
	file_proto_failed_tunnel_proto_goTypes = nil
	file_proto_failed_tunnel_proto_depIdxs = nil
}
