// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: proto/psiphond_metric.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PsiphondMetric struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The metric definition is intentionally placed first so that efficient
	// wire protocol peeking can be used to determine the embedded message
	// type without complete deserialization (which also entails recursively
	// deserializing the embedded metric message, which could be quite large).
	//
	// Types that are valid to be assigned to Metric:
	//
	//	*PsiphondMetric_DomainBytes
	//	*PsiphondMetric_FailedTunnel
	//	*PsiphondMetric_InproxyBroker
	//	*PsiphondMetric_IrregularTunnel
	//	*PsiphondMetric_OrphanPacket
	//	*PsiphondMetric_RemoteServerList
	//	*PsiphondMetric_ServerBlocklist
	//	*PsiphondMetric_ServerLoad
	//	*PsiphondMetric_ServerLoadDns
	//	*PsiphondMetric_ServerLoadProtocol
	//	*PsiphondMetric_ServerPanic
	//	*PsiphondMetric_ServerPacket
	//	*PsiphondMetric_ServerTunnel
	//	*PsiphondMetric_ServerTunnelAsnDestBytes
	//	*PsiphondMetric_Tactics
	//	*PsiphondMetric_TacticsSpeedtest
	//	*PsiphondMetric_UniqueUser
	Metric        isPsiphondMetric_Metric `protobuf_oneof:"metric"`
	Timestamp     *timestamppb.Timestamp  `protobuf:"bytes,100,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	HostId        *string                 `protobuf:"bytes,101,opt,name=host_id,json=hostId,proto3,oneof" json:"host_id,omitempty"`                     //LowCardinality
	HostType      *string                 `protobuf:"bytes,102,opt,name=host_type,json=hostType,proto3,oneof" json:"host_type,omitempty"`               //Could probably be removed, LowCardinality
	HostBuildRev  *string                 `protobuf:"bytes,103,opt,name=host_build_rev,json=hostBuildRev,proto3,oneof" json:"host_build_rev,omitempty"` //LowCardinality
	Provider      *string                 `protobuf:"bytes,104,opt,name=provider,proto3,oneof" json:"provider,omitempty"`                               //Could be removed, LowCardinality
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PsiphondMetric) Reset() {
	*x = PsiphondMetric{}
	mi := &file_proto_psiphond_metric_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PsiphondMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PsiphondMetric) ProtoMessage() {}

func (x *PsiphondMetric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_psiphond_metric_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PsiphondMetric.ProtoReflect.Descriptor instead.
func (*PsiphondMetric) Descriptor() ([]byte, []int) {
	return file_proto_psiphond_metric_proto_rawDescGZIP(), []int{0}
}

func (x *PsiphondMetric) GetMetric() isPsiphondMetric_Metric {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *PsiphondMetric) GetDomainBytes() *DomainBytes {
	if x != nil {
		if x, ok := x.Metric.(*PsiphondMetric_DomainBytes); ok {
			return x.DomainBytes
		}
	}
	return nil
}

func (x *PsiphondMetric) GetFailedTunnel() *FailedTunnel {
	if x != nil {
		if x, ok := x.Metric.(*PsiphondMetric_FailedTunnel); ok {
			return x.FailedTunnel
		}
	}
	return nil
}

func (x *PsiphondMetric) GetInproxyBroker() *InproxyBroker {
	if x != nil {
		if x, ok := x.Metric.(*PsiphondMetric_InproxyBroker); ok {
			return x.InproxyBroker
		}
	}
	return nil
}

func (x *PsiphondMetric) GetIrregularTunnel() *IrregularTunnel {
	if x != nil {
		if x, ok := x.Metric.(*PsiphondMetric_IrregularTunnel); ok {
			return x.IrregularTunnel
		}
	}
	return nil
}

func (x *PsiphondMetric) GetOrphanPacket() *OrphanPacket {
	if x != nil {
		if x, ok := x.Metric.(*PsiphondMetric_OrphanPacket); ok {
			return x.OrphanPacket
		}
	}
	return nil
}

func (x *PsiphondMetric) GetRemoteServerList() *RemoteServerList {
	if x != nil {
		if x, ok := x.Metric.(*PsiphondMetric_RemoteServerList); ok {
			return x.RemoteServerList
		}
	}
	return nil
}

func (x *PsiphondMetric) GetServerBlocklist() *ServerBlocklistHit {
	if x != nil {
		if x, ok := x.Metric.(*PsiphondMetric_ServerBlocklist); ok {
			return x.ServerBlocklist
		}
	}
	return nil
}

func (x *PsiphondMetric) GetServerLoad() *ServerLoad {
	if x != nil {
		if x, ok := x.Metric.(*PsiphondMetric_ServerLoad); ok {
			return x.ServerLoad
		}
	}
	return nil
}

func (x *PsiphondMetric) GetServerLoadDns() *ServerLoadDNS {
	if x != nil {
		if x, ok := x.Metric.(*PsiphondMetric_ServerLoadDns); ok {
			return x.ServerLoadDns
		}
	}
	return nil
}

func (x *PsiphondMetric) GetServerLoadProtocol() *ServerLoadProtocol {
	if x != nil {
		if x, ok := x.Metric.(*PsiphondMetric_ServerLoadProtocol); ok {
			return x.ServerLoadProtocol
		}
	}
	return nil
}

func (x *PsiphondMetric) GetServerPanic() *ServerPanic {
	if x != nil {
		if x, ok := x.Metric.(*PsiphondMetric_ServerPanic); ok {
			return x.ServerPanic
		}
	}
	return nil
}

func (x *PsiphondMetric) GetServerPacket() *ServerPacket {
	if x != nil {
		if x, ok := x.Metric.(*PsiphondMetric_ServerPacket); ok {
			return x.ServerPacket
		}
	}
	return nil
}

func (x *PsiphondMetric) GetServerTunnel() *ServerTunnel {
	if x != nil {
		if x, ok := x.Metric.(*PsiphondMetric_ServerTunnel); ok {
			return x.ServerTunnel
		}
	}
	return nil
}

func (x *PsiphondMetric) GetServerTunnelAsnDestBytes() *ServerTunnelASNDestBytes {
	if x != nil {
		if x, ok := x.Metric.(*PsiphondMetric_ServerTunnelAsnDestBytes); ok {
			return x.ServerTunnelAsnDestBytes
		}
	}
	return nil
}

func (x *PsiphondMetric) GetTactics() *Tactics {
	if x != nil {
		if x, ok := x.Metric.(*PsiphondMetric_Tactics); ok {
			return x.Tactics
		}
	}
	return nil
}

func (x *PsiphondMetric) GetTacticsSpeedtest() *TacticsSpeedTest {
	if x != nil {
		if x, ok := x.Metric.(*PsiphondMetric_TacticsSpeedtest); ok {
			return x.TacticsSpeedtest
		}
	}
	return nil
}

func (x *PsiphondMetric) GetUniqueUser() *UniqueUser {
	if x != nil {
		if x, ok := x.Metric.(*PsiphondMetric_UniqueUser); ok {
			return x.UniqueUser
		}
	}
	return nil
}

func (x *PsiphondMetric) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PsiphondMetric) GetHostId() string {
	if x != nil && x.HostId != nil {
		return *x.HostId
	}
	return ""
}

func (x *PsiphondMetric) GetHostType() string {
	if x != nil && x.HostType != nil {
		return *x.HostType
	}
	return ""
}

func (x *PsiphondMetric) GetHostBuildRev() string {
	if x != nil && x.HostBuildRev != nil {
		return *x.HostBuildRev
	}
	return ""
}

func (x *PsiphondMetric) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

type isPsiphondMetric_Metric interface {
	isPsiphondMetric_Metric()
}

type PsiphondMetric_DomainBytes struct {
	DomainBytes *DomainBytes `protobuf:"bytes,1,opt,name=domain_bytes,json=domainBytes,proto3,oneof"`
}

type PsiphondMetric_FailedTunnel struct {
	FailedTunnel *FailedTunnel `protobuf:"bytes,2,opt,name=failed_tunnel,json=failedTunnel,proto3,oneof"`
}

type PsiphondMetric_InproxyBroker struct {
	InproxyBroker *InproxyBroker `protobuf:"bytes,3,opt,name=inproxy_broker,json=inproxyBroker,proto3,oneof"`
}

type PsiphondMetric_IrregularTunnel struct {
	IrregularTunnel *IrregularTunnel `protobuf:"bytes,4,opt,name=irregular_tunnel,json=irregularTunnel,proto3,oneof"`
}

type PsiphondMetric_OrphanPacket struct {
	OrphanPacket *OrphanPacket `protobuf:"bytes,5,opt,name=orphan_packet,json=orphanPacket,proto3,oneof"`
}

type PsiphondMetric_RemoteServerList struct {
	RemoteServerList *RemoteServerList `protobuf:"bytes,6,opt,name=remote_server_list,json=remoteServerList,proto3,oneof"`
}

type PsiphondMetric_ServerBlocklist struct {
	ServerBlocklist *ServerBlocklistHit `protobuf:"bytes,7,opt,name=server_blocklist,json=serverBlocklist,proto3,oneof"`
}

type PsiphondMetric_ServerLoad struct {
	ServerLoad *ServerLoad `protobuf:"bytes,8,opt,name=server_load,json=serverLoad,proto3,oneof"`
}

type PsiphondMetric_ServerLoadDns struct {
	ServerLoadDns *ServerLoadDNS `protobuf:"bytes,9,opt,name=server_load_dns,json=serverLoadDns,proto3,oneof"`
}

type PsiphondMetric_ServerLoadProtocol struct {
	ServerLoadProtocol *ServerLoadProtocol `protobuf:"bytes,10,opt,name=server_load_protocol,json=serverLoadProtocol,proto3,oneof"`
}

type PsiphondMetric_ServerPanic struct {
	ServerPanic *ServerPanic `protobuf:"bytes,11,opt,name=server_panic,json=serverPanic,proto3,oneof"`
}

type PsiphondMetric_ServerPacket struct {
	ServerPacket *ServerPacket `protobuf:"bytes,12,opt,name=server_packet,json=serverPacket,proto3,oneof"`
}

type PsiphondMetric_ServerTunnel struct {
	ServerTunnel *ServerTunnel `protobuf:"bytes,13,opt,name=server_tunnel,json=serverTunnel,proto3,oneof"`
}

type PsiphondMetric_ServerTunnelAsnDestBytes struct {
	ServerTunnelAsnDestBytes *ServerTunnelASNDestBytes `protobuf:"bytes,14,opt,name=server_tunnel_asn_dest_bytes,json=serverTunnelAsnDestBytes,proto3,oneof"`
}

type PsiphondMetric_Tactics struct {
	Tactics *Tactics `protobuf:"bytes,15,opt,name=tactics,proto3,oneof"`
}

type PsiphondMetric_TacticsSpeedtest struct {
	TacticsSpeedtest *TacticsSpeedTest `protobuf:"bytes,16,opt,name=tactics_speedtest,json=tacticsSpeedtest,proto3,oneof"`
}

type PsiphondMetric_UniqueUser struct {
	UniqueUser *UniqueUser `protobuf:"bytes,17,opt,name=unique_user,json=uniqueUser,proto3,oneof"`
}

func (*PsiphondMetric_DomainBytes) isPsiphondMetric_Metric() {}

func (*PsiphondMetric_FailedTunnel) isPsiphondMetric_Metric() {}

func (*PsiphondMetric_InproxyBroker) isPsiphondMetric_Metric() {}

func (*PsiphondMetric_IrregularTunnel) isPsiphondMetric_Metric() {}

func (*PsiphondMetric_OrphanPacket) isPsiphondMetric_Metric() {}

func (*PsiphondMetric_RemoteServerList) isPsiphondMetric_Metric() {}

func (*PsiphondMetric_ServerBlocklist) isPsiphondMetric_Metric() {}

func (*PsiphondMetric_ServerLoad) isPsiphondMetric_Metric() {}

func (*PsiphondMetric_ServerLoadDns) isPsiphondMetric_Metric() {}

func (*PsiphondMetric_ServerLoadProtocol) isPsiphondMetric_Metric() {}

func (*PsiphondMetric_ServerPanic) isPsiphondMetric_Metric() {}

func (*PsiphondMetric_ServerPacket) isPsiphondMetric_Metric() {}

func (*PsiphondMetric_ServerTunnel) isPsiphondMetric_Metric() {}

func (*PsiphondMetric_ServerTunnelAsnDestBytes) isPsiphondMetric_Metric() {}

func (*PsiphondMetric_Tactics) isPsiphondMetric_Metric() {}

func (*PsiphondMetric_TacticsSpeedtest) isPsiphondMetric_Metric() {}

func (*PsiphondMetric_UniqueUser) isPsiphondMetric_Metric() {}

var File_proto_psiphond_metric_proto protoreflect.FileDescriptor

const file_proto_psiphond_metric_proto_rawDesc = "" +
	"\n" +
	"\x1bproto/psiphond_metric.proto\x12\bpsiphond\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x18proto/domain_bytes.proto\x1a\x19proto/failed_tunnel.proto\x1a\x1aproto/inproxy_broker.proto\x1a\x1cproto/irregular_tunnel.proto\x1a\x19proto/orphan_packet.proto\x1a\x1eproto/remote_server_list.proto\x1a\x1cproto/server_blocklist.proto\x1a\x17proto/server_load.proto\x1a\x18proto/server_panic.proto\x1a\x19proto/server_packet.proto\x1a\x19proto/server_tunnel.proto\x1a\x13proto/tactics.proto\x1a\x17proto/unique_user.proto\"\xa9\v\n" +
	"\x0ePsiphondMetric\x12:\n" +
	"\fdomain_bytes\x18\x01 \x01(\v2\x15.psiphond.DomainBytesH\x00R\vdomainBytes\x12=\n" +
	"\rfailed_tunnel\x18\x02 \x01(\v2\x16.psiphond.FailedTunnelH\x00R\ffailedTunnel\x12@\n" +
	"\x0einproxy_broker\x18\x03 \x01(\v2\x17.psiphond.InproxyBrokerH\x00R\rinproxyBroker\x12F\n" +
	"\x10irregular_tunnel\x18\x04 \x01(\v2\x19.psiphond.IrregularTunnelH\x00R\x0firregularTunnel\x12=\n" +
	"\rorphan_packet\x18\x05 \x01(\v2\x16.psiphond.OrphanPacketH\x00R\forphanPacket\x12J\n" +
	"\x12remote_server_list\x18\x06 \x01(\v2\x1a.psiphond.RemoteServerListH\x00R\x10remoteServerList\x12I\n" +
	"\x10server_blocklist\x18\a \x01(\v2\x1c.psiphond.ServerBlocklistHitH\x00R\x0fserverBlocklist\x127\n" +
	"\vserver_load\x18\b \x01(\v2\x14.psiphond.ServerLoadH\x00R\n" +
	"serverLoad\x12A\n" +
	"\x0fserver_load_dns\x18\t \x01(\v2\x17.psiphond.ServerLoadDNSH\x00R\rserverLoadDns\x12P\n" +
	"\x14server_load_protocol\x18\n" +
	" \x01(\v2\x1c.psiphond.ServerLoadProtocolH\x00R\x12serverLoadProtocol\x12:\n" +
	"\fserver_panic\x18\v \x01(\v2\x15.psiphond.ServerPanicH\x00R\vserverPanic\x12=\n" +
	"\rserver_packet\x18\f \x01(\v2\x16.psiphond.ServerPacketH\x00R\fserverPacket\x12=\n" +
	"\rserver_tunnel\x18\r \x01(\v2\x16.psiphond.ServerTunnelH\x00R\fserverTunnel\x12d\n" +
	"\x1cserver_tunnel_asn_dest_bytes\x18\x0e \x01(\v2\".psiphond.ServerTunnelASNDestBytesH\x00R\x18serverTunnelAsnDestBytes\x12-\n" +
	"\atactics\x18\x0f \x01(\v2\x11.psiphond.TacticsH\x00R\atactics\x12I\n" +
	"\x11tactics_speedtest\x18\x10 \x01(\v2\x1a.psiphond.TacticsSpeedTestH\x00R\x10tacticsSpeedtest\x127\n" +
	"\vunique_user\x18\x11 \x01(\v2\x14.psiphond.UniqueUserH\x00R\n" +
	"uniqueUser\x12=\n" +
	"\ttimestamp\x18d \x01(\v2\x1a.google.protobuf.TimestampH\x01R\ttimestamp\x88\x01\x01\x12\x1c\n" +
	"\ahost_id\x18e \x01(\tH\x02R\x06hostId\x88\x01\x01\x12 \n" +
	"\thost_type\x18f \x01(\tH\x03R\bhostType\x88\x01\x01\x12)\n" +
	"\x0ehost_build_rev\x18g \x01(\tH\x04R\fhostBuildRev\x88\x01\x01\x12\x1f\n" +
	"\bprovider\x18h \x01(\tH\x05R\bprovider\x88\x01\x01B\b\n" +
	"\x06metricB\f\n" +
	"\n" +
	"_timestampB\n" +
	"\n" +
	"\b_host_idB\f\n" +
	"\n" +
	"_host_typeB\x11\n" +
	"\x0f_host_build_revB\v\n" +
	"\t_providerB?Z=github.com/Psiphon-Labs/psiphon-tunnel-core/psiphon/server/pbb\x06proto3"

var (
	file_proto_psiphond_metric_proto_rawDescOnce sync.Once
	file_proto_psiphond_metric_proto_rawDescData []byte
)

func file_proto_psiphond_metric_proto_rawDescGZIP() []byte {
	file_proto_psiphond_metric_proto_rawDescOnce.Do(func() {
		file_proto_psiphond_metric_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_psiphond_metric_proto_rawDesc), len(file_proto_psiphond_metric_proto_rawDesc)))
	})
	return file_proto_psiphond_metric_proto_rawDescData
}

var file_proto_psiphond_metric_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_psiphond_metric_proto_goTypes = []any{
	(*PsiphondMetric)(nil),           // 0: psiphond.PsiphondMetric
	(*DomainBytes)(nil),              // 1: psiphond.DomainBytes
	(*FailedTunnel)(nil),             // 2: psiphond.FailedTunnel
	(*InproxyBroker)(nil),            // 3: psiphond.InproxyBroker
	(*IrregularTunnel)(nil),          // 4: psiphond.IrregularTunnel
	(*OrphanPacket)(nil),             // 5: psiphond.OrphanPacket
	(*RemoteServerList)(nil),         // 6: psiphond.RemoteServerList
	(*ServerBlocklistHit)(nil),       // 7: psiphond.ServerBlocklistHit
	(*ServerLoad)(nil),               // 8: psiphond.ServerLoad
	(*ServerLoadDNS)(nil),            // 9: psiphond.ServerLoadDNS
	(*ServerLoadProtocol)(nil),       // 10: psiphond.ServerLoadProtocol
	(*ServerPanic)(nil),              // 11: psiphond.ServerPanic
	(*ServerPacket)(nil),             // 12: psiphond.ServerPacket
	(*ServerTunnel)(nil),             // 13: psiphond.ServerTunnel
	(*ServerTunnelASNDestBytes)(nil), // 14: psiphond.ServerTunnelASNDestBytes
	(*Tactics)(nil),                  // 15: psiphond.Tactics
	(*TacticsSpeedTest)(nil),         // 16: psiphond.TacticsSpeedTest
	(*UniqueUser)(nil),               // 17: psiphond.UniqueUser
	(*timestamppb.Timestamp)(nil),    // 18: google.protobuf.Timestamp
}
var file_proto_psiphond_metric_proto_depIdxs = []int32{
	1,  // 0: psiphond.PsiphondMetric.domain_bytes:type_name -> psiphond.DomainBytes
	2,  // 1: psiphond.PsiphondMetric.failed_tunnel:type_name -> psiphond.FailedTunnel
	3,  // 2: psiphond.PsiphondMetric.inproxy_broker:type_name -> psiphond.InproxyBroker
	4,  // 3: psiphond.PsiphondMetric.irregular_tunnel:type_name -> psiphond.IrregularTunnel
	5,  // 4: psiphond.PsiphondMetric.orphan_packet:type_name -> psiphond.OrphanPacket
	6,  // 5: psiphond.PsiphondMetric.remote_server_list:type_name -> psiphond.RemoteServerList
	7,  // 6: psiphond.PsiphondMetric.server_blocklist:type_name -> psiphond.ServerBlocklistHit
	8,  // 7: psiphond.PsiphondMetric.server_load:type_name -> psiphond.ServerLoad
	9,  // 8: psiphond.PsiphondMetric.server_load_dns:type_name -> psiphond.ServerLoadDNS
	10, // 9: psiphond.PsiphondMetric.server_load_protocol:type_name -> psiphond.ServerLoadProtocol
	11, // 10: psiphond.PsiphondMetric.server_panic:type_name -> psiphond.ServerPanic
	12, // 11: psiphond.PsiphondMetric.server_packet:type_name -> psiphond.ServerPacket
	13, // 12: psiphond.PsiphondMetric.server_tunnel:type_name -> psiphond.ServerTunnel
	14, // 13: psiphond.PsiphondMetric.server_tunnel_asn_dest_bytes:type_name -> psiphond.ServerTunnelASNDestBytes
	15, // 14: psiphond.PsiphondMetric.tactics:type_name -> psiphond.Tactics
	16, // 15: psiphond.PsiphondMetric.tactics_speedtest:type_name -> psiphond.TacticsSpeedTest
	17, // 16: psiphond.PsiphondMetric.unique_user:type_name -> psiphond.UniqueUser
	18, // 17: psiphond.PsiphondMetric.timestamp:type_name -> google.protobuf.Timestamp
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_psiphond_metric_proto_init() }
func file_proto_psiphond_metric_proto_init() {
	if File_proto_psiphond_metric_proto != nil {
		return
	}
	file_proto_domain_bytes_proto_init()
	file_proto_failed_tunnel_proto_init()
	file_proto_inproxy_broker_proto_init()
	file_proto_irregular_tunnel_proto_init()
	file_proto_orphan_packet_proto_init()
	file_proto_remote_server_list_proto_init()
	file_proto_server_blocklist_proto_init()
	file_proto_server_load_proto_init()
	file_proto_server_panic_proto_init()
	file_proto_server_packet_proto_init()
	file_proto_server_tunnel_proto_init()
	file_proto_tactics_proto_init()
	file_proto_unique_user_proto_init()
	file_proto_psiphond_metric_proto_msgTypes[0].OneofWrappers = []any{
		(*PsiphondMetric_DomainBytes)(nil),
		(*PsiphondMetric_FailedTunnel)(nil),
		(*PsiphondMetric_InproxyBroker)(nil),
		(*PsiphondMetric_IrregularTunnel)(nil),
		(*PsiphondMetric_OrphanPacket)(nil),
		(*PsiphondMetric_RemoteServerList)(nil),
		(*PsiphondMetric_ServerBlocklist)(nil),
		(*PsiphondMetric_ServerLoad)(nil),
		(*PsiphondMetric_ServerLoadDns)(nil),
		(*PsiphondMetric_ServerLoadProtocol)(nil),
		(*PsiphondMetric_ServerPanic)(nil),
		(*PsiphondMetric_ServerPacket)(nil),
		(*PsiphondMetric_ServerTunnel)(nil),
		(*PsiphondMetric_ServerTunnelAsnDestBytes)(nil),
		(*PsiphondMetric_Tactics)(nil),
		(*PsiphondMetric_TacticsSpeedtest)(nil),
		(*PsiphondMetric_UniqueUser)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_psiphond_metric_proto_rawDesc), len(file_proto_psiphond_metric_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_psiphond_metric_proto_goTypes,
		DependencyIndexes: file_proto_psiphond_metric_proto_depIdxs,
		MessageInfos:      file_proto_psiphond_metric_proto_msgTypes,
	}.Build()
	File_proto_psiphond_metric_proto = out.File
	file_proto_psiphond_metric_proto_goTypes = nil
	file_proto_psiphond_metric_proto_depIdxs = nil
}
